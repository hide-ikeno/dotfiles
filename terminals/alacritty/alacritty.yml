# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  # TERM: xterm-256color
  TERM: alacritty-direct

  # Terminal program name
  TERM_PROGRAM: alacritty
  # COLORTERM setting
  COLORTERM: truecolor

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 0
    lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  # position:
  #   x: 0
  #   y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 2
    y: 2

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #   - full: Borders and title bar
  #   - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #   - transparent: Title bar, transparent background and title bar buttons
  #   - buttonless: Title bar, transparent background, but no title bar buttons
  decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Windowed

  # Window title
  # title: Alacritty

  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true

  # # Window class (Linux/BSD only):
  # class:
  #   # Application instance name
  #   instance: Alacritty
  #   # General application class
  #   general: Alacritty

  # GTK theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark`
  # and `light`.  Set this to `None` to use the default theme variant.
  # gtk_theme_variant: None

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux) monospace
    #   - (Windows) Consolas
    # family: Hack Nerd Font
    # style: Regular
    family: mononoki Nerd Font
    style: Regular

    # The `style` can be specified to pick a specific face.

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    # family: Hack Nerd Font
    family: mononoki Nerd Font

    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    # family: Hack Nerd Font
    family: mononoki Nerd Font

    # The `style` can be specified to pick a specific face.
    style: Italic

    # Bold italic font face
    bold_italic:
      # Font family
      #
      # If the bold italic family is not specified, it will fall back to the
      # value specified for the normal font.
      # family: monospace
      # family: Hack Nerd Font
      family: mononoki Nerd Font
      # family: Monofur Nerd Font

      # The `style` can be specified to pick a specific face.
      style: Bold Italic

  # Point size
  size: 18.0

  # Offset is the extra space around each character. `offset.y` can be thought
  # of as modifying the line spacing, and `offset.x` as modifying the letter
  # spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the
  # right, increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  use_thin_strokes: true

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Color schemes
#
# You can define multiple color schemes and use anchors to choose which one
# Alacritty will use.
#
schemes:
  ### Edge (Light variant)
  edge_light: &edge_light
    primary:
      background: "#fafafa"
      foreground: "#4b505b"

    normal:
      black: "#4b505b"
      red: "#d05858"
      green: "#608e32"
      yellow: "#be7e05"
      blue: "#5079be"
      magenta: "#b05ccc"
      cyan: "#3a8b84"
      white: "#fafafa"

    bright:
      black: "#4b505b"
      red: "#d05858"
      green: "#608e32"
      yellow: "#be7e05"
      blue: "#5079be"
      magenta: "#b05ccc"
      cyan: "#3a8b84"
      white: "#fafafa"

  ### Edge (Dark Default variant)
  edge_dark_def: &edge_dark_default
    primary:
      background: "#2c2e34"
      foreground: "#c5cdd9"

    normal:
      black: "#3e4249"
      red: "#ec7279"
      green: "#a0c980"
      yellow: "#deb974"
      blue: "#6cb6eb"
      magenta: "#d38aea"
      cyan: "#5dbbc1"
      white: "#c5cdd9"

    bright:
      black: "#3e4249"
      red: "#ec7279"
      green: "#a0c980"
      yellow: "#deb974"
      blue: "#6cb6eb"
      magenta: "#d38aea"
      cyan: "#5dbbc1"
      white: "#c5cdd9"

  ### Edge (Dark Aura variant)
  edge_dark_aura: &edge_dark_aura
    primary:
      background: "#2b2d37"
      foreground: "#c5cdd9"

    normal:
      black: "#363a49"
      red: "#ec7279"
      green: "#a0c980"
      yellow: "#deb974"
      blue: "#6cb6eb"
      magenta: "#d38aea"
      cyan: "#5dbbc1"
      white: "#c5cdd9"

    bright:
      black: "#363a49"
      red: "#ec7279"
      green: "#a0c980"
      yellow: "#deb974"
      blue: "#6cb6eb"
      magenta: "#d38aea"
      cyan: "#5dbbc1"
      white: "#c5cdd9"

  ### Edge (Dark Neon variant)
  edge_dark_neon: &edge_dark_neon
    primary:
      background: "#2b2d3a"
      foreground: "#c5cdd9"

    normal:
      black: "#363a4e"
      red: "#ec7279"
      green: "#a0c980"
      yellow: "#deb974"
      blue: "#6cb6eb"
      magenta: "#d38aea"
      cyan: "#5dbbc1"
      white: "#c5cdd9"

    bright:
      black: "#363a4e"
      red: "#ec7279"
      green: "#a0c980"
      yellow: "#deb974"
      blue: "#6cb6eb"
      magenta: "#d38aea"
      cyan: "#5dbbc1"
      white: "#c5cdd9"

  ### Iceberg (dark)
  iceberg_dark: &iceberg_dark
    primary:
      background: "#161821"
      foreground: "#d2d4de"

      normal:
        black: "#161821"
        red: "#e27878"
        green: "#b4be82"
        yellow: "#e2a478"
        blue: "#84a0c6"
        magenta: "#a093c7"
        cyan: "#89b8c2"
        white: "#c6c8d1"

      bright:
        black: "#6b7089"
        red: "#e98989"
        green: "#c0ca8e"
        yellow: "#e9b189"
        blue: "#91acd1"
        magenta: "#ada0d3"
        cyan: "#95c4ce"
        white: "#d2d4de"

  ### Iceberg (light)
  iceberg_light: &iceberg_light
    primary:
      background: "#e8e9ec"
      foreground: "#33374c"

    normal:
      black: "#dcdfe7"
      red: "#cc517a"
      green: "#668e3d"
      yellow: "#c57339"
      blue: "#2d539e"
      magenta: "#7759b4"
      cyan: "#3f83a6"
      white: "#33374c"

    bright:
      black: "#8389a3"
      red: "#cc3768"
      green: "#598030"
      yellow: "#b6662d"
      blue: "#22478e"
      magenta: "#6845ad"
      cyan: "#327698"
      white: "#262a3f"

# Colors (Edge Aura Dark)
colors: *edge_dark_aura

# Bell
#
# The bell is rung every time the BEL control character is received.
bell:
  # Visual Bell Animation
  #
  # Animation effect for flashing the screen when the visual bell is rung.
  #
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  animation: EaseOutExpo

  # Duration of the visual bell flash. A `duration` of `0` will disable the
  # visual bell animation.
  duration: 0

  # Visual bell animation color.
  # color: '#ffffff'
  # Bell Command
  #
  # This program is executed whenever the bell is rung.
  #
  # When set to `command: None`, no command will be executed.
  #
  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #
  # command: None

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
background_opacity: 0.9

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # Vi mode cursor style
  #
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  #
  # See `cursor.style` for available options.
  # vi_mode_style: None

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  # thickness: 0.15

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g.
# `/bin/fish`.  Entries in `shell.args` are passed unmodified as arguments to
# the shell.
#
# Default:
#   - (Linux/macOS) /bin/bash --login
#   - (Windows) powershell
shell:
  program: /bin/zsh
  args:
    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
# working_directory: None

# WinPTY backend (Windows only)
#
# Alacritty defaults to using the newer ConPTY backend if it is available,
# since it resolves a lot of bugs and is quite a bit faster. If it is not
# available, the WinPTY backend will be used instead.
#
# Setting this option to `true` makes Alacritty use the legacy WinPTY backend,
# even if the ConPTY backend is available.
# winpty_backend: false

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: {threshold: 300}
  triple_click: {threshold: 300}

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a
    # URL.  The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux) xdg-open
    #   - (Windows) explorer
    # launcher: xdg-open

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when
    # clicking on them. The available modifiers are documented in the key
    # binding section.
    modifiers: None

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
  - {mouse: Middle, action: PasteSelection}

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#   - SearchBackward
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#   - SearchNext
#   - SearchPrevious
#   - SearchStart
#   - SearchEnd
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
key_bindings:
  # - {key: Paste,                                action: Paste         }
  # - {key: Copy,                                 action: Copy          }
  # - {key: L,         mods: Control,             action: ClearLogNotice}
  # - {key: L,         mods: Control, mode: ~Vi,  chars: "\x0c"         }
  # - {key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp, }
  # - {key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown}
  # - {key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,  }
  # - {key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom}

  # Vi Mode
  #- { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
  #- { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
  #- { key: Escape,                      mode: Vi, action: ClearSelection          }
  #- { key: I,                           mode: Vi, action: ScrollToBottom          }
  #- { key: I,                           mode: Vi, action: ToggleViMode            }
  #- { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
  #- { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
  #- { key: G,                           mode: Vi, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
  #- { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
  #- { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
  #- { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
  #- { key: Y,                           mode: Vi, action: Copy                    }
  #- { key: Y,                           mode: Vi, action: ClearSelection          }
  #- { key: Copy,                        mode: Vi, action: ClearSelection          }
  #- { key: V,                           mode: Vi, action: ToggleNormalSelection   }
  #- { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
  #- { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
  #- { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
  #- { key: Return,                      mode: Vi, action: Open                    }
  #- { key: K,                           mode: Vi, action: Up                      }
  #- { key: J,                           mode: Vi, action: Down                    }
  #- { key: H,                           mode: Vi, action: Left                    }
  #- { key: L,                           mode: Vi, action: Right                   }
  #- { key: Up,                          mode: Vi, action: Up                      }
  #- { key: Down,                        mode: Vi, action: Down                    }
  #- { key: Left,                        mode: Vi, action: Left                    }
  #- { key: Right,                       mode: Vi, action: Right                   }
  #- { key: Key0,                        mode: Vi, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
  #- { key: H,      mods: Shift,         mode: Vi, action: High                    }
  #- { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
  #- { key: L,      mods: Shift,         mode: Vi, action: Low                     }
  #- { key: B,                           mode: Vi, action: SemanticLeft            }
  #- { key: W,                           mode: Vi, action: SemanticRight           }
  #- { key: E,                           mode: Vi, action: SemanticRightEnd        }
  #- { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
  #- { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
  #- { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
  #- { key: Slash,                       mode: Vi, action: SearchForward           }
  #- { key: Slash,  mods: Shift,         mode: Vi, action: SearchBackward          }
  #- { key: N,                           mode: Vi, action: SearchNext              }
  #- { key: N,      mods: Shift,         mode: Vi, action: SearchPrevious          }

  # (Windows/Linux only)
  #- { key: V,        mods: Control|Shift,    action: Paste               }
  #- { key: C,        mods: Control|Shift,    action: Copy                }
  #- { key: Insert,   mods: Shift,   action: PasteSelection               }
  #- { key: Key0,     mods: Control, action: ResetFontSize                }
  #- { key: Equals,   mods: Control, action: IncreaseFontSize             }
  #- { key: Subtract, mods: Control, action: DecreaseFontSize             }

  # (macOS only)
  - {key: Key0, mods: Command, action: ResetFontSize}
  - {key: Equals, mods: Command, action: IncreaseFontSize}
  - {key: Minus, mods: Command, action: DecreaseFontSize}
  - {key: K, mods: Command, action: ClearHistory}
  - {key: K, mods: Command, chars: "\x0c"}
  - {key: V, mods: Command, action: Paste}
  - {key: C, mods: Command, action: Copy}
  - {key: H, mods: Command, action: Hide}
  - {key: Q, mods: Command, action: Quit}
  - {key: W, mods: Command, action: Quit}

  - {key: Paste, action: Paste}
  - {key: Copy, action: Copy}
  - {key: L, mods: Control, action: ClearLogNotice}
  - {key: L, mods: Control, chars: "\x0c"}
  - {key: Home, chars: "\x1bOH", mode: AppCursor}
  - {key: Home, chars: "\x1b[H", mode: ~AppCursor}
  - {key: End, chars: "\x1bOF", mode: AppCursor}
  - {key: End, chars: "\x1b[F", mode: ~AppCursor}
  - {key: PageUp, mods: Shift, chars: "\x1b[5;2~"}
  - {key: PageUp, mods: Control, chars: "\x1b[5;5~"}
  - {key: PageUp, chars: "\x1b[5~"}
  - {key: PageDown, mods: Shift, chars: "\x1b[6;2~"}
  - {key: PageDown, mods: Control, chars: "\x1b[6;5~"}
  - {key: PageDown, chars: "\x1b[6~"}
  - {key: Tab, mods: Shift, chars: "\x1b[Z"}
  - {key: Back, chars: "\x7f"}
  - {key: Back, mods: Alt, chars: "\x1b\x7f"}
  - {key: Insert, chars: "\x1b[2~"}
  - {key: Delete, chars: "\x1b[3~"}
  - {key: Left, mods: Shift, chars: "\x1b[1;2D"}
  - {key: Left, mods: Control, chars: "\x1b[1;5D"}
  - {key: Left, mods: Alt, chars: "\x1b[1;3D"}
  - {key: Left, chars: "\x1b[D", mode: ~AppCursor}
  - {key: Left, chars: "\x1bOD", mode: AppCursor}
  - {key: Right, mods: Shift, chars: "\x1b[1;2C"}
  - {key: Right, mods: Control, chars: "\x1b[1;5C"}
  - {key: Right, mods: Alt, chars: "\x1b[1;3C"}
  - {key: Right, chars: "\x1b[C", mode: ~AppCursor}
  - {key: Right, chars: "\x1bOC", mode: AppCursor}
  - {key: Up, mods: Shift, chars: "\x1b[1;2A"}
  - {key: Up, mods: Control, chars: "\x1b[1;5A"}
  - {key: Up, mods: Alt, chars: "\x1b[1;3A"}
  - {key: Up, chars: "\x1b[A", mode: ~AppCursor}
  - {key: Up, chars: "\x1bOA", mode: AppCursor}
  - {key: Down, mods: Shift, chars: "\x1b[1;2B"}
  - {key: Down, mods: Control, chars: "\x1b[1;5B"}
  - {key: Down, mods: Alt, chars: "\x1b[1;3B"}
  - {key: Down, chars: "\x1b[B", mode: ~AppCursor}
  - {key: Down, chars: "\x1bOB", mode: AppCursor}
  - {key: F1, chars: "\x1bOP"}
  - {key: F2, chars: "\x1bOQ"}
  - {key: F3, chars: "\x1bOR"}
  - {key: F4, chars: "\x1bOS"}
  - {key: F5, chars: "\x1b[15~"}
  - {key: F6, chars: "\x1b[17~"}
  - {key: F7, chars: "\x1b[18~"}
  - {key: F8, chars: "\x1b[19~"}
  - {key: F9, chars: "\x1b[20~"}
  - {key: F10, chars: "\x1b[21~"}
  - {key: F11, chars: "\x1b[23~"}
  - {key: F12, chars: "\x1b[24~"}
  - {key: F1, mods: Shift, chars: "\x1b[1;2P"}
  - {key: F2, mods: Shift, chars: "\x1b[1;2Q"}
  - {key: F3, mods: Shift, chars: "\x1b[1;2R"}
  - {key: F4, mods: Shift, chars: "\x1b[1;2S"}
  - {key: F5, mods: Shift, chars: "\x1b[15;2~"}
  - {key: F6, mods: Shift, chars: "\x1b[17;2~"}
  - {key: F7, mods: Shift, chars: "\x1b[18;2~"}
  - {key: F8, mods: Shift, chars: "\x1b[19;2~"}
  - {key: F9, mods: Shift, chars: "\x1b[20;2~"}
  - {key: F10, mods: Shift, chars: "\x1b[21;2~"}
  - {key: F11, mods: Shift, chars: "\x1b[23;2~"}
  - {key: F12, mods: Shift, chars: "\x1b[24;2~"}
  - {key: F1, mods: Control, chars: "\x1b[1;5P"}
  - {key: F2, mods: Control, chars: "\x1b[1;5Q"}
  - {key: F3, mods: Control, chars: "\x1b[1;5R"}
  - {key: F4, mods: Control, chars: "\x1b[1;5S"}
  - {key: F5, mods: Control, chars: "\x1b[15;5~"}
  - {key: F6, mods: Control, chars: "\x1b[17;5~"}
  - {key: F7, mods: Control, chars: "\x1b[18;5~"}
  - {key: F8, mods: Control, chars: "\x1b[19;5~"}
  - {key: F9, mods: Control, chars: "\x1b[20;5~"}
  - {key: F10, mods: Control, chars: "\x1b[21;5~"}
  - {key: F11, mods: Control, chars: "\x1b[23;5~"}
  - {key: F12, mods: Control, chars: "\x1b[24;5~"}
  - {key: F1, mods: Alt, chars: "\x1b[1;6P"}
  - {key: F2, mods: Alt, chars: "\x1b[1;6Q"}
  - {key: F3, mods: Alt, chars: "\x1b[1;6R"}
  - {key: F4, mods: Alt, chars: "\x1b[1;6S"}
  - {key: F5, mods: Alt, chars: "\x1b[15;6~"}
  - {key: F6, mods: Alt, chars: "\x1b[17;6~"}
  - {key: F7, mods: Alt, chars: "\x1b[18;6~"}
  - {key: F8, mods: Alt, chars: "\x1b[19;6~"}
  - {key: F9, mods: Alt, chars: "\x1b[20;6~"}
  - {key: F10, mods: Alt, chars: "\x1b[21;6~"}
  - {key: F11, mods: Alt, chars: "\x1b[23;6~"}
  - {key: F12, mods: Alt, chars: "\x1b[24;6~"}
  - {key: F1, mods: Super, chars: "\x1b[1;3P"}
  - {key: F2, mods: Super, chars: "\x1b[1;3Q"}
  - {key: F3, mods: Super, chars: "\x1b[1;3R"}
  - {key: F4, mods: Super, chars: "\x1b[1;3S"}
  - {key: F5, mods: Super, chars: "\x1b[15;3~"}
  - {key: F6, mods: Super, chars: "\x1b[17;3~"}
  - {key: F7, mods: Super, chars: "\x1b[18;3~"}
  - {key: F8, mods: Super, chars: "\x1b[19;3~"}
  - {key: F9, mods: Super, chars: "\x1b[20;3~"}
  - {key: F10, mods: Super, chars: "\x1b[21;3~"}
  - {key: F11, mods: Super, chars: "\x1b[23;3~"}
  - {key: F12, mods: Super, chars: "\x1b[24;3~"}
  - {key: NumpadEnter, chars: "\n"}
  # --- Make `Ctrl+Space` works
  - {key: Space, mods: Control, chars: "\x00"}
  # --- Make `Option` to send `ESC` key beforehand
  #    Alacritty does not correctly work around diacritics,
  #    so it cannot map, say, 'Option-i' to 'Meta-i'.
  #    The following hack is proposed but does not solve this problem.
  #
  #    So I decided to use Karabiner-Elements complex modifier configuration
  #    given by erashrd.
  #
  #    Ref:
  #      - https://github.com/jwilm/alacritty/issues/1610
  #      - https://github.com/pqrs-org/KE-complex_modifications/pull/441
  #
  # - { key: A,         mods: Alt,       chars: "\x1ba"                       }
  # - { key: B,         mods: Alt,       chars: "\x1bb"                       }
  # - { key: C,         mods: Alt,       chars: "\x1bc"                       }
  # - { key: D,         mods: Alt,       chars: "\x1bd"                       }
  # - { key: E,         mods: Alt,       chars: "\x1be"                       }
  # - { key: F,         mods: Alt,       chars: "\x1bf"                       }
  # - { key: G,         mods: Alt,       chars: "\x1bg"                       }
  # - { key: H,         mods: Alt,       chars: "\x1bh"                       }
  # - { key: I,         mods: Alt,       chars: "\x1bi"                       }
  # - { key: J,         mods: Alt,       chars: "\x1bj"                       }
  # - { key: K,         mods: Alt,       chars: "\x1bk"                       }
  # - { key: L,         mods: Alt,       chars: "\x1bl"                       }
  # - { key: M,         mods: Alt,       chars: "\x1bm"                       }
  # - { key: N,         mods: Alt,       chars: "\x1bn"                       }
  # - { key: O,         mods: Alt,       chars: "\x1bo"                       }
  # - { key: P,         mods: Alt,       chars: "\x1bp"                       }
  # - { key: Q,         mods: Alt,       chars: "\x1bq"                       }
  # - { key: R,         mods: Alt,       chars: "\x1br"                       }
  # - { key: S,         mods: Alt,       chars: "\x1bs"                       }
  # - { key: T,         mods: Alt,       chars: "\x1bt"                       }
  # - { key: U,         mods: Alt,       chars: "\x1bu"                       }
  # - { key: V,         mods: Alt,       chars: "\x1bv"                       }
  # - { key: W,         mods: Alt,       chars: "\x1bw"                       }
  # - { key: X,         mods: Alt,       chars: "\x1bx"                       }
  # - { key: Y,         mods: Alt,       chars: "\x1by"                       }
  # - { key: Z,         mods: Alt,       chars: "\x1bz"                       }
  # - { key: A,         mods: Alt|Shift, chars: "\x1bA"                       }
  # - { key: B,         mods: Alt|Shift, chars: "\x1bB"                       }
  # - { key: C,         mods: Alt|Shift, chars: "\x1bC"                       }
  # - { key: D,         mods: Alt|Shift, chars: "\x1bD"                       }
  # - { key: E,         mods: Alt|Shift, chars: "\x1bE"                       }
  # - { key: F,         mods: Alt|Shift, chars: "\x1bF"                       }
  # - { key: G,         mods: Alt|Shift, chars: "\x1bG"                       }
  # - { key: H,         mods: Alt|Shift, chars: "\x1bH"                       }
  # - { key: I,         mods: Alt|Shift, chars: "\x1bI"                       }
  # - { key: J,         mods: Alt|Shift, chars: "\x1bJ"                       }
  # - { key: K,         mods: Alt|Shift, chars: "\x1bK"                       }
  # - { key: L,         mods: Alt|Shift, chars: "\x1bL"                       }
  # - { key: M,         mods: Alt|Shift, chars: "\x1bM"                       }
  # - { key: N,         mods: Alt|Shift, chars: "\x1bN"                       }
  # - { key: O,         mods: Alt|Shift, chars: "\x1bO"                       }
  # - { key: P,         mods: Alt|Shift, chars: "\x1bP"                       }
  # - { key: Q,         mods: Alt|Shift, chars: "\x1bQ"                       }
  # - { key: R,         mods: Alt|Shift, chars: "\x1bR"                       }
  # - { key: S,         mods: Alt|Shift, chars: "\x1bS"                       }
  # - { key: T,         mods: Alt|Shift, chars: "\x1bT"                       }
  # - { key: U,         mods: Alt|Shift, chars: "\x1bU"                       }
  # - { key: V,         mods: Alt|Shift, chars: "\x1bV"                       }
  # - { key: W,         mods: Alt|Shift, chars: "\x1bW"                       }
  # - { key: X,         mods: Alt|Shift, chars: "\x1bX"                       }
  # - { key: Y,         mods: Alt|Shift, chars: "\x1bY"                       }
  # - { key: Z,         mods: Alt|Shift, chars: "\x1bZ"                       }
  # - { key: Key1,      mods: Alt,       chars: "\x1b1"                       }
  # - { key: Key2,      mods: Alt,       chars: "\x1b2"                       }
  # - { key: Key3,      mods: Alt,       chars: "\x1b3"                       }
  # - { key: Key4,      mods: Alt,       chars: "\x1b4"                       }
  # - { key: Key5,      mods: Alt,       chars: "\x1b5"                       }
  # - { key: Key6,      mods: Alt,       chars: "\x1b6"                       }
  # - { key: Key7,      mods: Alt,       chars: "\x1b7"                       }
  # - { key: Key8,      mods: Alt,       chars: "\x1b8"                       }
  # - { key: Key9,      mods: Alt,       chars: "\x1b9"                       }
  # - { key: Key0,      mods: Alt,       chars: "\x1b0"                       }
  # - { key: Grave,     mods: Alt,       chars: "\x1b`"                       } # Alt + `
  # - { key: Grave,     mods: Alt|Shift, chars: "\x1b~"                       } # Alt + ~
  # - { key: Period,    mods: Alt,       chars: "\x1b."                       } # Alt + .
  # - { key: Period,    mods: Alt|Shift, chars: "\x1b>"                       } # Alt + >
  # - { key: Key8,      mods: Alt|Shift, chars: "\x1b*"                       } # Alt + *
  # - { key: Key3,      mods: Alt|Shift, chars: "\x1b#"                       } # Alt + #
  # - { key: Comma,     mods: Alt,       chars: "\x1b,"                       } # Alt + ,
  # - { key: Comma,     mods: Alt|Shift, chars: "\x1b<"                       } # Alt + <
  # - { key: Minus,     mods: Alt|Shift, chars: "\x1b_"                       } # Alt + _
  # - { key: Key5,      mods: Alt|Shift, chars: "\x1b%"                       } # Alt + %
  # - { key: Key6,      mods: Alt|Shift, chars: "\x1b^"                       } # Alt + ^
  # - { key: Backslash, mods: Alt,       chars: "\x1b\\"                      } # Alt + \
  # - { key: Backslash, mods: Alt|Shift, chars: "\x1b|"                       } # Alt + |
  # - { key: Slash,     mods: Alt,       chars: "\x1b/"                       } # Alt + /
  # - { key: Slash,     mods: Alt|Shift, chars: "\x1b\x3f"                    } # Alt + ?
  # - { key: Semicolon, mods: Alt,       chars: "\x1b;"                       } # Alt + ;
  # - { key: Semicolon, mods: Alt|Shift, chars: "\x1b:"                       } # Alt + :
  # - { key: LBracket,  mods: Alt,       chars: "\x1b["                       } # Alt + [
  # - { key: LBracket,  mods: Alt|Shift, chars: "\x1b{"                       } # Alt + {
  # - { key: RBracket,  mods: Alt,       chars: "\x1b]"                       } # Alt + ]
  # - { key: RBracket,  mods: Alt|Shift, chars: "\x1b}"                       } # Alt + }
  # - { key: Return,    mods: Alt,       chars: "\x1b\x0d"                    } # Alt + Return
