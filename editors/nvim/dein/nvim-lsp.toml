[[plugins]]
repo = 'neovim/nvim-lsp'
if = 'has("nvim-0.5")'
on_cmd = ['LspInstall', 'LspInstallInfo']
on_func = ['nvim_lsp#setup']
on_ft = [
  'c', 'cpp', 'dockerfile', 'fortran', 'go', 'javascript', 'lua', 'python',
  'ruby', 'rust', 'sh', 'tex', 'typescript', 'vim', 'yaml'
]
hook_add = '''
" from https://github.com/h-michael/dotfiles/blob/master/.vim/rc/plugins/lazy.rc.toml
lua << EOF
  vim.lsp.set_log_level("debug")
  vim.api.nvim_set_var("enable_nvim_lsp_diagnostics", true)
  vim.lsp.callbacks['textDocument/publishDiagnostics'] = function(_, _, result)
    if vim.api.nvim_get_var('enable_nvim_lsp_diagnostics') then
      local util = vim.lsp.util
      if not result then return end
      local uri = result.uri
      local bufnr = vim.uri_to_bufnr(uri)
      if not bufnr then
        err_message("LSP.publishDiagnostics: Couldn't find buffer for ", uri)
        return
      end
      util.buf_clear_diagnostics(bufnr)
      util.buf_diagnostics_save_positions(bufnr, result.diagnostics)
      util.buf_diagnostics_underline(bufnr, result.diagnostics)
      -- util.buf_diagnostics_virtual_text(bufnr, result.diagnostics)
      -- util.set_loclist(result.diagnostics)
    end
  end
EOF

function! ToggleDiagnosics() abort
lua << EOF
  if vim.api.nvim_get_var("enable_nvim_lsp_diagnostics") then
    vim.lsp.util.buf_clear_diagnostics()
    diagnostic_ns = vim.api.nvim_create_namespace("vim_lsp_diagnostics")
  end
  vim.api.nvim_set_var("enable_nvim_lsp_diagnostics", not vim.api.nvim_get_var("enable_nvim_lsp_diagnostics"))
EOF
endfunction

function! MyLspConfig() abort
  " Key mappings
  nnoremap <buffer><silent> <C-]> <cmd>lua vim.lsp.buf.definition()<CR>
  nnoremap <buffer><silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
  nnoremap <buffer><silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
  nnoremap <buffer><silent> gy    <cmd>lua vim.lsp.buf.type_definition()<CR>
  nnoremap <buffer><silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
  nnoremap <buffer><silent> gR    <cmd>lua vim.lsp.buf.rename()<CR>
  nnoremap <buffer><silent> gq    <cmd>lua vim.lsp.buf.formatting()<CR>
  vnoremap <buffer><silent> gq    <cmd>lua vim.lsp.buf.range_formatting()<CR>
  nnoremap <buffer><silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
  nnoremap <buffer><silent> <C-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
  " Omni completion source
  setlocal omnifunc=v:lua.vim.lsp.omnifunc
endfunction
'''

[plugins.ftplugin]
c = '''
call MyLspConfig()
lua require'nvim_lsp'.ccls.setup{}
'''

cpp = '''
call MyLspConfig()
lua require'nvim_lsp'.ccls.setup{}
'''

fortran = '''
call MyLspConfig()
lua require'nvim_lsp'.fortls.setup{}
'''

go = '''
call MyLspConfig()
lua << EOF
  local nvim_lsp = require'nvim_lsp'
  nvim_lsp.gopls.setup{
    capabilities = {
      textDocument = {
        completion = {
          completionItem = {
            snippetSupport = true
          }
        }
      }
    },
    init_options = {
      usePlaceholders = true,
      completeUnimported = true
    }
  }
EOF
'''

javascript = '''
call SetMyLspConfig()
lua require'nvim_lsp'.flow.setup{}
'''

lua = '''
call MyLspConfig()
lua require'nvim_lsp'.sumneko_lua.setup{}
'''

python = '''
call MyLspConfig()
lua << EOF
  local nvim_lsp = require'nvim_lsp'
  nvim_lsp.pyls.setup{
    settings = {
      pyls = {
        plugins = {
          flake8 = { enabled = true };
          pycodestyle = { enabled = true };
          pydocstyle = { enabled = false };
          pylint = { enabled = false };
          yapf = { enabled = false };
          jedi_definition = {
            follow_imports = true;
            follow_builtin_imports = true;
          }
        }
      }
    }
  }
EOF
'''

ruby = '''
call MyLspConfig()
lua require'nvim_lsp'.solargraph.setup{}
'''

rust = '''
call MyLspConfig()

if executable('ra_lsp_server')
lua << EOF
  require'nvim_lsp'.rust_analyzer.setup{
    capabilities = {
      textDocument = {
        completion = {
          completionItem = {
            snippetSupport = true
          }
        }
      }
    },
  }
EOF
else
lua << EOF
  require'nvim_lsp'.rls.setup{
    cmd = {"rustup", "run", "nightly", "rls"};
    settings = {
      rls = {
        enableMultiProjectSetup = true;
        all_features = true;
        all_targets = true;
        full_docs = true;
        jobs = 2;
        unstable_features = true;
        wait_to_build = 1500;
      };
    };
  }
EOF
endif
'''

sh = '''
call MyLspConfig()
lua require'nvim_lsp'.bashls.setup{}
'''

tex = '''
call MyLspConfig()
lua require'nvim_lsp'.texlab.setup{}
'''

typescript = '''
call MyLspConfig()
lua require'nvim_lsp'.tsserver.setup{}
'''

vim = '''
call MyLspConfig()
lua require'nvim_lsp'.vimls.setup{}
'''
