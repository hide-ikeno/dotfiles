# === Plugins (lazy loading) ===

#==============================================================================
# LSP / Formatter / Linter
#==============================================================================

[[plugins]]
repo = 'neovim/nvim-lsp'
if = 'has("nvim-0.5")'
on_cmd = ['LspInstall', 'LspInstallInfo']
on_func = ['nvim_lsp#setup']
on_ft = [
  'c', 'cpp', 'dockerfile', 'fortran', 'go', 'lua', 'python',
  'ruby', 'rust', 'sh', 'tex', 'vim', 'yaml'
]
hook_add = 'lua require("plugins.nvim-lsp").hook_add()'
# hook_post_source = 'lua require("plugins.nvim-lsp").hook_post_source()'

# A wrapper for neovim built in LSP diagnosis config
[[plugins]]
repo = 'haorenW1025/diagnostic-nvim'
on_cmd = ['NextDiagnostic', 'PrevDiagnostic', 'OpenDiagnostic']
on_source = ['nvim-lsp']

# NeoVim Language Server Smart Tags
[[plugins]]
repo = 'weilbith/nvim-lsp-smag'
on_event = 'VimEnter'

# NeoVim Language Server Smart Tags
[[plugins]]
repo = 'weilbith/nvim-lsp-denite'
depends = ['denite.nvim', 'nvim-lsp']
on_source = ['nvim-lsp']

# Syntax-aware code formatting
[[plugins]]
repo = 'google/vim-codefmt'
on_ft = [
  'auduino', 'bzl', 'c', 'cpp', 'dart', 'go', 'gn',
  'html','css', 'sass', 'scss', 'less',
  'java', 'javascript', 'json', 'proto',
  'python', 'rust', 'sh', 'vue'
]
hook_add = 'lua require("plugins.codefmt").hook_add()'

#==============================================================================
# Tree sitter
#==============================================================================
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufRead']
hook_source = 'lua require("plugins.nvim-treesitter").hook_source()'

#==============================================================================
# Denite
#==============================================================================

# Dark powered asynchronous unite all interfaces for Neovim/Vim8
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['fruzzy']
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']
on_func = ['denite#']
hook_add = 'lua require("plugins.denite").hook_add()'
hook_source = 'lua require("plugins.denite").hook_source()'

# External denite.nvim mathcer
[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_add = 'lua require("plugins.fruzzy").hook_add()'
hook_post_update = 'lua require("plugins.fruzzy").hook_post_update()'

# register/yank for denite
[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']
hook_add = '''
  let g:neoyank#file = $VIM_CACHE_HOME . "/neoyank/yank_history"
'''

# MRU
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim']
hook_add = '''
  let g:neomru#file_mru_path      = $VIM_CACHE_HOME . "/neomru/file"
  let g:neomru#directory_mru_path = $VIM_CACHE_HOME . "/neomru/directory"
'''

# Dark powered shell interface for Neovim
[[plugins]]
repo = 'Shougo/deol.nvim'
on_source = ['denite.nvim']
hook_add = '''
  nnoremap <silent> <Space>'  :<C-u>Deol zsh -no-start-insert -split=horizontal<CR>
  nnoremap <silent> <C-t> :<C-u>Denite -buffer-name=deol -split=floating -cursor-pos=`tabpagenr()-1` deol:zsh<CR>
'''

hook_source = '''
  let g:deol#prompt_pattern = '\w*% '
  let g:deol#shell_history_path = $ZDOTDIR . '/zsh_history'
'''

[plugins.ftplugin]
deol = '''
  nmap <buffer> i      <Plug>(deol_edit)
'''
zsh = '''
  imap <buffer> <C-c>  <Plug>(deol_quit)
'''

#==============================================================================
# Auto completion
#==============================================================================

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_source = 'lua require("plugins.deoplete").hook_source()'
hook_post_source = 'lua require("plugins.deoplete").hook_post_source()'

# Completion sources
[[plugins]]
repo = 'Shougo/neco-syntax'
depends = ['deoplete.nvim']
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

# Completion preview window based on neovim's floating window
[[plugins]]
repo = 'ncm2/float-preview.nvim'
on_source = ['deoplete.nvim']
if = 'has("nvim")'
hook_source = 'lua require("plugins.float-preview").hook_add()'

# Snippet
[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add = 'lua require("plugins.neosnippet").hook_add()'

# # Auto close parentheses
# [[plugins]]
# repo = 'cohama/lexima.vim'
# on_event = 'InsertCharPre'
# hook_source = '''
#   let g:lexima_ctrlh_as_backspace = 1
# '''
# hook_post_source = '''
#   call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
#   call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
#   call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
# '''

# Auto create TAG files
[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
if = "executable('ctags')"
on_path = '.*'
hook_add = 'lua require("plugins.vim-gutentags").hook_add()'

# VSCode(LSP)'s snippet feature in vim.
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertCharPre'
hook_add = '''
  if dein#tap('neosnippet.vim')
    imap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' :
          \ neosnippet#expandable_or_jumpable() ? : '<Plug>(neosnippet_jump_or_expand)' ? '<C-n>'
    smap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' :
          \ neosnippet#expandable_or_jumpable() ? : '<Plug>(neosnippet_jump_or_expand)' ? '<C-n>'
  else
    imap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-n>'
    smap <expr> <C-s>  vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-n>'
  endif
'''

# vim-snip integrations to LSP clients and deoplete/asyncomplete
[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = ['vim-vsnip']

#==============================================================================
# File manager
#==============================================================================

# Defx --- Dark ppowered file explorer implementation
[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = ['Defx']
hook_add = 'lua require("plugins.defx").hook_add()'
hook_source = 'lua require("plugins.defx").hook_source()'

# Filetype icons for Defx
[[plugins]]
repo = 'kristijanhusak/defx-icons'
on_source = ['defx.nvim']

#==============================================================================
# Commands
#==============================================================================

# Utility commands for dein.vim
[[plugins]]
repo = 'haya14busa/dein-command.vim'
depends = ['dein.vim']
on_cmd = ['Dein']

# View and search LSP symbols and tags in Vim/NeoVim
[[plugins]]
repo = 'liuchengxu/vista.vim'
on_cmd = ['Vista', 'Vista!', 'Vista!!']
hook_add = 'lua require("plugins.vista").hook_add()'

# Perform the replacement in |quickfix|
[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['qf']
[plugins.ftplugin]
qf = '''
nnoremap <buffer> R :<C-u>Qfreplace<CR>
'''

# # Navigate windows like tmux's 'display-pane'
# [[plugins]]
# repo = 't9md/vim-choosewin'
# on_map = {n = '<Plug>'}
# hook_add = '''
#   nmap -  <Plug>(choosewin)
# '''

# --- Smart Align
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = ['EasyAlign', 'LiveEasyAlign']
on_map = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
hook_add = 'lua require("plugins.vim-easy-align").hook_add()'

# --- Switch between single-line and multiline forms of code
[[plugins]]
# use default mapping
#   gS -> SplitjoinSplit
#   gJ -> SplitjoinJoin
repo = 'AndrewRadev/splitjoin.vim'
on_map = {n = '<Plug>Splitjoin'}

# Delete buffer without closing window
[[plugins]]
repo = 'rbgrouleff/bclose.vim'
on_cmd = ['Bclose']
hook_add = '''
  let g:bclose_no_plugins_maps = 1
  nnoremap <silent> sx  :<C-u>Bclose<CR>
'''

#==============================================================================
# Interfaces
#==============================================================================

# Displays available keybindingss in pupup
[[plugins]]
repo = 'liuchengxu/vim-which-key'
on_cmd = ['WhichKey', 'WhichKey!', 'WhichKeyVisual', 'WhichKeyVisual!']
hook_add = 'lua require("plugins.vim-which-key").hook_add()'
hook_source = 'lua require("plugins.vim-which-key").hook_source()'

# SKK imput method for Japanese
[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>(eskk'}
hook_add = 'lua require("plugins.eskk").hook_add()'
hook_source = 'lua require("plugins.eskk").hook_source()'

# Smart commenter
[[plugins]]
repo = 'tyru/caw.vim'
depends = ['context_filetype.vim']
on_map = {nv = '<Plug>'}
hook_add = 'lua require("plugins.caw").hook_add()'

# Make blockwise visual mode more useful
[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {nx = '<Plug>'}
hook_add = 'lua require("plugins.vim-niceblock").hook_add()'

# Vim motions on speed!
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = {n = '<Plug>(easymotion'}
hook_add = 'lua require("plugins.vim-easymotion").hook_add()'

# Move to the edge!
[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_map = {nv = '<Plug>(edgemotion'}
hook_add = 'lua require("plugins.vim-edgemotion").hook_add()'

# Accerlerate up-down moving!
[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = 'lua require("plugins.accelerated-jk").hook_add()'

#  Extended J command
[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {nx = '<Plug>'}
hook_add = 'lua require("plugins.vim-jplus").hook_add()'

# improve foldtext for better looks
[[plugins]]
repo = 'lambdalisue/readablefold.vim'
on_event = 'BufEnter'

# # Fast folding
# [[plugins]]
# repo = 'Konfekt/FastFold'
# on_event = 'BufEnter'
# hook_add = 'lua require("plugins.FastFold").hook_add()'

# # Set the buffer filetype based on the code block
# [[plugins]]
# repo = 'osyo-manga/vim-precious'
# depends = ['context_filetype.vim']
# on_event = 'BufEnter'

# [DO]cument [GE]nerator
[[plugins]]
repo = 'kkoomen/vim-doge'
on_path = '.*'
hook_add = 'lua require("plugins.vim-doge").hook_add()'

# A high-performance color highligher for Neovim
[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_event = 'VimEnter'
hook_post_source = 'lua require("colorizer").setup()'

#==============================================================================
# Textobj/Operator extensions
#==============================================================================

[[plugins]]
repo = 'machakann/vim-sandwich'
#on_map = {nxo = ['<Plug>(operator-sandwich', '<Plug>(textobj-sandwich']}
on_path = '.*'
hook_add = 'lua require("plugins.vim-sandwich").hook_add()'
hook_source = 'lua require("plugins.vim-sandwich").hook_source()'

[[plugins]]
repo = 'kana/vim-operator-replace'
on_map = {nx = '<Plug>'}
depends = ['vim-operator-user']
hook_add = '''
  nmap _ <Plug>(operator-replace)
  xmap _ <Plug>(operator-replace)
'''

# [[plugins]]
# repo = 'kana/vim-textobj-line'
# depends = ['vim-textobj-user']
# on_map = {ox = '<Plug>'}
# hook_add = 'lua require("plugins.vim-textobj-line").hook_add()'
#
# [[plugins]]
# repo = 'thinca/vim-textobj-comment'
# depends = ['vim-textobj-user']
# on_map = {ox = '<Plug>'}
# hook_add = 'lua require("plugins.vim-textobj-comment").hook_add()'

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>'}
hook_add = 'lua require("plugins.vim-textobj-indent").hook_add()'

[[plugins]]
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = 'lua require("plugins.vim-textobj-url").hook_add()'

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
on_map = {ox = '<Plug>'}
hook_add = 'lua require("plugins.vim-textobj-parameter").hook_add()'

[[plugins]]
repo = 'machakann/vim-textobj-delimited'
on_map = {ox = '<Plug>'}
hook_add = 'lua require("plugins.vim-textobj-delimited").hook_add()'

# --- Expand region
[[plugins]]
repo = 'terryma/vim-expand-region'
depends = ['vim-sandwich', 'vim-textobj-delimited', 'vim-textobj-line']
on_map = {x = '<Plug>'}
hook_add = 'lua require("plugins.vim-expand-region").hook_add()'

#==============================================================================
# VCS (Git)
#==============================================================================

# Git wrapper
# [[plugins]]
# repo = 'tpope/vim-fugitive'
# on_cmd = ['Git', 'Gcd', 'Glcd', 'Gstatus', 'Gcommit', 'Gmerge', 'Gpull',
#           'Grebase', 'Gpush', 'Gfetch', 'Ggrep', 'Glgrep', 'Glog', 'Gllog',
#           'Gedit', 'Gsplit', 'Gvsplit', 'Gpedit', 'Gtabedit', 'Gpedit',
#           'Gread', 'Gwrite', 'Gwq', 'Gdiff', 'Gsdiff', 'Gvdiff', 'Gmove',
#           'Grename', 'Gblame', 'Gbrowse']
# on_func = 'fugitive#'

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina']
on_func = ['gina#']
hook_add = 'lua require("plugins.gina").hook_add()'
hook_post_source = 'lua require("plugins.gina").hook_post_source()'

# # Show a git diff in the gutter (sign column)
# [[plugins]]
# repo = 'airblade/vim-gitgutter'
# on_path = '.*'
# hook_add = '''
#   nmap ]g  <Plug>(GitGutterNextHunk)
#   nmap [g  <Plug>(GitGutterPrevHunk)
#   nmap gs  <Plug>(GitGutterPreviewHunk)
# '''

# Show differences with style
[[plugins]]
repo = 'mhinz/vim-signify'
on_path = '.*'
hook_add = 'lua require("plugins.vim-signify").hook_add()'


# More pleasant editing on commit messages
[[plugins]]
repo = 'rhysd/committia.vim'
on_path = 'COMMIT_EDITMSG'
hook_source = '''
let g:committia_min_window_width = 100
'''

# Reveal the commit messages under the cursor
[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = ['GitMessenger']
on_map = {n = '<Plug>(git-messenger'}
hook_add = 'lua require("plugins.git-messenger").hook_add()'

#==============================================================================
# Filetype
#==============================================================================

# LaTeX
# [[plugins]]
# repo = 'lervag/vimtex'
# on_ft = 'tex'
# hook_source = 'source $VIM_CONFIG_HOME/rc/plugins/vimtex.vim'

# Python
[[plugins]]
repo = 'lambdalisue/vim-pyenv'
on_ft = 'python'

[[plugins]]
repo = 'petobens/poet-v'
on_ft = 'python'
hook_source = '''
let g:poetv_auto_activate = 1
'''

[[plugins]]
repo = 'tmhedberg/SimpylFold'
on_ft = 'python'

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

# Markdown live preview
[[plugins]]
repo = 'iamcco/markdown-preview.vim'
build = 'cd app && yarn install'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
hook_source = '''
let g:mkdp_refresh_slow = 1
'''

# Hex editor
[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
let g:vinarise_enable_auto_detect = 1
'''
