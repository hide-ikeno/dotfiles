# === Coc.nvim (lazy loading) ===
#
# Complete engine and Language Server support for neovim & vim,
# featured as VSCode
#

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
on_event = 'VimEnter'
build = 'yarn install --frozen-lockfile'

hook_add = '''
  " --- Insert mode key mapping for auto completion
  " Use <TAB> for trigger completion with characters ahead and navigate.
  inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" :
        \ <SID>CheckBackspace() ? "\<TAB>" : coc#refresh()
  " Use <S-TAB> for completion back
  inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
  " Use <CR> for confirm completion.
  "   `<C-g>u` means break undo chain at current position.
  "    Coc only does snippet and additional edit on confirm.
  inoremap <silent><expr> <CR> pumvisible() ? coc#_select_confirm() :
        \ "\<C-g>u\<CR>\<C-r>=coc#on_enter()\<CR>"
  " Use <C-Space> for trigger completion.
  inoremap <silent><expr> <C-Space> coc#refresh()
  " Custom complete
  imap     <silent> <C-x><C-u>  <Plug>(coc-complete-custom)

  " Use <C-s> to expand snippets
  imap <silent> <C-s>  <Plug>(coc-snippets-expand-jump)
  xmap <silent> <C-s>  <Plug>(coc-snippets-select)

  " --- Key mappings for LSP features: use 'm' as the prefix key
  nmap <silent> m?  <Plug>(coc-diagnostic-info)
  nmap <silent> m[  <Plug>(coc-diagnostic-prev)
  nmap <silent> m]  <Plug>(coc-diagnostic-next)
  nmap <silent> md  <Plug>(coc-definition)
  nmap <silent> mD  <Plug>(coc-declaration)
  nmap <silent> mi  <Plug>(coc-implementation)
  nmap <silent> mt  <Plug>(coc-type-definition)
  nmap <silent> mr  <Plug>(coc-reference)
  nmap <silent> mR  <Plug>(coc-rename)
  nmap <silent> ma  <Plug>(coc-codeaction-selected)
  xmap <silent> ma  <Plug>(coc-codeaction-selected)
  nmap <silent> mA  <Plug>(coc-codeaction)
  nmap <silent> mL  <Plug>(coc-codelens-action)
  nmap <silent> mf  <Plug>(coc-format)
  xmap <silent> mf  <Plug>(coc-format-selected)
  nmap <silent> mF  <Plug>(coc-fix-current)

  nnoremap <silent> mj  :<C-u>CocList location<CR>
  nnoremap <silent> mq  :<C-u>CocList diagnostics<CR>
  nnoremap <silent> mo  :<C-u>CocList outline<CR>
  nnoremap <silent> ms  :<C-u>CocList symbols<CR>

  nnoremap <silent> mh  :<C-u>call CocAction('doHover')<CR>
  nnoremap <silent> K   :<C-u>call <SID>ShowDocumentation()<CR>

  " --- Git extension
  nmap [g <Plug>(coc-git-prevchunk)
  nmap ]g <Plug>(coc-git-nextchunk)
  nmap gs <Plug>(coc-git-chunkinfo)
  nmap gb <Plug>(coc-git-commit)

  " --- CocList mappings
  "   options:
  "    -A, --auto-preview
  "    -I, --interactive
  "    -N, --number-select

  nnoremap <silent> <Space><Space> :<C-u>CocList<CR>
  nnoremap <silent> <Space>;       :<C-u>CocList vimcommands<CR>
  nnoremap <silent> <Space>:       :<C-u>CocList cmdhistory<CR>
  nnoremap <silent> <Space>b       :<C-u>CocList buffers<CR>
  nnoremap <silent> <Space>c       :<C-u>CocList commands<CR>
  nnoremap <silent> <Space>e       :<C-u>CocList extensions<CR>
  nnoremap <silent> <Space>f       :<C-u>CocList files<CR>
  nnoremap <silent> <Space>F       :<C-u>CocList folders<CR>
  nnoremap <silent> <Space>g       :<C-u>CocList --normal gstatus<CR>
  nnoremap <silent> <Space>h       :<C-u>CocList helptags<CR>
  nnoremap <silent> <Space>k       :<C-u>CocList maps<CR>
  nnoremap <silent> <Space>l       :<C-u>CocList locationlist<CR>
  nnoremap <silent> <Space>q       :<C-u>CocList quickfix<CR>
  nnoremap <silent> <Space>r       :<C-u>CocList mru<CR>
  nnoremap <silent> <Space>s       :<C-u>CocList snippets<CR>
  nnoremap <silent> <Space>w       :exe 'CocList -A -I --normal --input='.expand('<cword>').' words -w'<CR>
  nnoremap <silent> <Space>y       :<C-u>CocList --normal yank<CR>
  nnoremap <silent> <Space>/       :<C-u>Rg<Space>
  nnoremap <silent> <Space>*       :<C-u>set operatorfunc=<SID>GrepFromSelected<CR>g@
  vnoremap <silent> <Space>*       :<C-u>call <SID>GrepFromSelected(visualmode())<CR>

  nnoremap <silent> <Space>p       :<C-u>CocListResume<CR>
  nnoremap <silent> <Space>]       :<C-u>CocNext<CR>
  nnoremap <silent> <Space>[       :<C-u>CocPrev<CR>

  autocmd MyAutoCmd FileType python
        \ nnoremap <silent><buffer> m'  :<C-u>CocCommand python.execInTerminal<CR>

  " Utility funcitons for key mapping
  function! s:CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction

  function! s:ShowDocumentation() abort
    if &filetype == 'vim'
      execute 'help '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  function! s:GrepFromSelected(type)
    let saved_unnamed_register = @@
    if a:type ==# 'v'
      normal! `<v`>y
    elseif a:type ==# 'char'
      normal! `[v`]y
    else
      return
    endif
    let word = substitute(@@, '\n$', '', 'g')
    let word = escape(word, '| ')
    let @@ = saved_unnamed_register
    execute 'CocList grep '.word
  endfunction
'''

hook_source = '''
  " List of extensions
  " TODO: add coc-sh when bash-language-server is available for Node.js 12
  let g:coc_global_extensions = [
        \ 'coc-lists', 'coc-snippets', 'coc-yank',
        \ 'coc-emoji', 'coc-syntax', 'coc-tag', 'coc-word',
        \ 'coc-highlight',
        \ 'coc-css', 'coc-emmet', 'coc-html', 'coc-svg',
        \ 'coc-git',
        \ 'coc-go',
        \ 'coc-eslint', 'coc-jest', 'coc-prettier', 'coc-tsserver', 'coc-vetur',
        \ 'coc-json',
        \ 'coc-python',
        \ 'coc-rls',
        \ 'coc-solargraph',
        \ 'coc-vimlsp',
        \ 'coc-vimtex',
        \ 'coc-yaml',
        \ ]

  function! s:CocLspSettings() abort
    " formatexpr from language server (gq{motion})
    setlocal formatexpr=CocAction('formatSelected')
  endfunction

  " --- Autocmd
  augroup MyAutoCmd
    autocmd CursorHold * silent! call CocActionAsync('highlight')
    autocmd InsertEnter *            call CocActionAsync('showSignatureHelp')
    autocmd User CocJumpPlaceholder  call CocActionAsync('showSignatureHelp')
    autocmd User CocQuickfixChange   :CocList --normal quickfix
    autocmd FileType c,cpp,objc,objcpp,go,typescript,json,python,ruby,rust,sh,vim,yaml
          \ call s:CocLspSettings()
  augroup END
'''

hook_post_source = '''
  " --- Suggest / completion {{{
  call coc#config('suggest', {
        \ 'autoTrigger': 'always',
        \ 'triggerAfterInsertEnter': v:true,
        \ 'timeout': 1000,
        \ 'noselect': v:true,
        \ 'formatOnType': v:false,
        \ 'snippetIndicator': "\uf0d0",
        \ 'enablePreview': v:true,
        \ 'completionItemKindLabels' : {
        \   'function':      "\uf794",
        \   'method':        "\uf6a6",
        \   'variable':      "\uf71b",
        \   'constant':      "\uf8ff",
        \   'struct':        "\ufb44",
        \   'class':         "\uf0e8",
        \   'interface':     "\ufa52",
        \   'text':          "\ue612",
        \   'enum':          "\uf435",
        \   'enumMember':    "\uf02b",
        \   'module':        "\uf668",
        \   'color':         "\ue22b",
        \   'property':      "\ufab6",
        \   'field':         "\uf93d",
        \   'unit':          "\uf475",
        \   'file':          "\uf471",
        \   'value':         "\uf8a3",
        \   'event':         "\ufacd",
        \   'folder':        "\uf115",
        \   'keyword':       "\uf893",
        \   'snippet':       "\uf64d",
        \   'operator':      "\uf915",
        \   'reference':     "\uf87a",
        \   'typeParameter': "\uf278",
        \   'default':       "\uf29c"
        \ },
        \ })
  " }}}

  " --- Diagnostics {{{
  call coc#config('diagnostic', {
        \ 'enable':          v:true,
        \ 'signOffset':      1000,
        \ 'errorSign':       "\uf00d",
        \ 'warningSign':     "\uf071",
        \ 'infoSign':        "\uf05a",
        \ 'hintSign':        "\uf27b",
        \ 'maxWindowHeight': 15
        \ })
  " }}}

  " --- Signature {{{
  call coc#config('signature', {
        \ 'enable': v:true,
        \ 'maxWindowHeight': 15
        \ })
  " }}}

  " --- CocList {{{
  call coc#config('list', {
        \ 'maxHeight': 15,
        \ 'maxPreviewHeight': 20,
        \ 'nextKeymap': "<C-j>",
        \ 'perviousKeymap': "<C-k>",
        \ 'insertMappings': {
        \   '<C-g>': 'do:exit',
        \   },
        \ 'normalMappings': {
        \   '<C-g>': 'do:exit',
        \   '<C-j>': 'do:next',
        \   '<C-k>': 'do:previous',
        \   'd':     'action:delete',
        \   },
        \ })
  " }}}

  " --- Language servers {{{
  let s:languageservers = {}

  " Python -> use coc-python
  " Ruby   -> use coc-solargraph
  " Rust   -> use coc-rls
  " VimL   -> use coc-vimlsp

  " C/C++/Obj-C/Obj-C++
  if executable('ccls')
    let s:languageservers['ccls'] = {
          \   'command': 'ccls',
          \   'filetypes': ['c', 'cpp', 'cuda', 'objc', 'objcpp'],
          \   'rootPatterns': ['.ccls', 'compile_commands.json',
          \                    '.vim', '.git', '.hg'],
          \   'initializationOptions': {
          \     'cacheDirectory': $XDG_CACHE_HOME.'/ccls',
          \     'completion': {
          \       'filterAndSort': v:false
          \     },
          \   }
          \ }
  endif

  if executable('clangd')
    let s:languageservers['clangd'] = {
          \   'command': 'clangd',
          \   'filetypes': ['c', 'cpp', 'objc', 'objcpp'],
          \   'rootPatterns': ['compile_flags.txt', 'compile_commands.json',
          \                    '.vim', '.git', '.hg'],
          \   }
          \ }
  endif

  " Fortran
  if executable('fortls')
    let s:languageservers['fortran'] = {
          \   'command': $PYENV_ROOT . '/versions/neovim3/bin/fortls',
          \   'filetypes': ['fortran']
          \ }
  endif

  " Docker
  if executable('docker-langserver')
    let s:languageservers['dockerfile'] = {
          \   'command': 'docker-langserver',
          \   'args': ['--stdio'],
          \   'filetypes': ['dockerfile'],
          \ }
  endif

  " Reason
  if executable('reason-language-server')
    let s:languageservers['reason'] = {
          \   'command': 'reason-language-server',
          \   'filetypes': ['reason']
          \ }
  endif

  " Vim/erb/Markdown
  if executable('efm-langserver')
    let s:languageservers['efm'] = {
          \   'command': 'efm-langserver',
          \   'args': [],
          \   'filetypes': ['eruby', 'markdown'],
          \   'ignoredRootPaths': ['~']
          \ }
  endif

  " Register language server configurations
  if !empty(s:languageservers)
    call coc#config('languageserver', s:languageservers)
  endif
  " }}}

  " --- Extensions {{{
  " coc-lists
  if executable('fd')
    call coc#config('list', {
          \ 'source': {
          \   'files': {
          \     'command' : 'fd',
          \     'args': [
          \       '--type=f', '--hidden', '--follow', '--color=never',
          \       '--exclude=.git', '--exclude=.venv', '--exclude=.svn',
          \       '--exclude=node_modules'
          \       ]
          \     }
          \   }
          \ })
  endif

  " coc-python
  call coc#config('python', {
        \ 'formatting': {
        \   'provider': 'yapf',
        \   'autopep8Path': $PYENV_ROOT.'/versions/neovim3/bin/autopep8',
        \   'blackPath': $PYENV_ROOT.'/versions/neovim3/bin/black',
        \   'yapfPath': $PYENV_ROOT.'/versions/neovim3/bin/yapf',
        \ },
        \ 'linting': {
        \   'mypynEnabled': v:true,
        \   'mypyPath': $PYENV_ROOT.'/versions/neovim3/bin/mypy',
        \   'pylintPath': $PYENV_ROOT.'/versions/neovim3/bin/pylint',
        \ },
        \ 'sortImports': {
        \   'path': $PYENV_ROOT.'/versions/neovim3/bin/isort',
        \ },
        \ 'venvPath': $PYENV_ROOT.'/versions',
        \ 'jediEnabled': v:false,
        \ 'jediPath': $PYENV_ROOT.'/versions/neovim3/bin/jedi',
        \ })

  " coc-vimlsp
  call coc#config('vimlsp', {
      \ 'debug': {
      \   'type': 'boolean',
      \   'default': v:false,
      \   'description': 'enable coc-vimlsp service debug',
      \ },
      \ 'trace.server': {
      \   'type': 'string',
      \   'default': 'off',
      \   'enum': ['off', 'messages', 'verbose'],
      \   'description': 'Trace level of vim language server',
      \ },
      \ })

  " coc-git
  " call coc#config('git', {
  "     \ 'addGlameToVirtualText': v:true,
  "     \ 'addGlameToBufferVar': v:true,
  "     \ })

  " }}}

  " --- Custom commands {{{
  " Format: format current buffer
  command! -nargs=0 Format :call CocAction('format')
  " Fold: fold current buffer
  command! -nargs=? Fold   :call CocAction('fold', <f-args>)
  " Rg: grep (requires coc-lists extension)
  command! -nargs=+ -complete=custom,s:GrepArgs Rg exe 'CocList grep '.<q-args>

  function! s:GrepArgs(...)
    let list = ['-S', '-smartcase', '-i', '-ignorecase', '-w', '-word',
          \ '-e', '-regex', '-u', '-skip-vcs-ignores', '-t', '-extension']
    return join(list, "\n")
  endfunction
  " }}}
'''

[[plugins]]
repo = 'neoclide/coc-neco'
depends = ['neco-vim', 'coc.nvim']
on_source = 'coc.nvim'

[[plugins]]
repo = 'jsfaint/coc-neoinclude'
depends = ['neoinclude.vim', 'coc.nvim']
on_source = 'coc.nvim'
