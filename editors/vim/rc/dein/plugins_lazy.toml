# === Plugins (lazy loading) ===

#==============================================================================
# Auto completion
#==============================================================================

# # Snippet
# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = ['neosnippet-snippets', 'context_filetype.vim']
# on_event = 'InsertCharPre'
# on_ft = 'snippet'
# hook_add = '''
#   imap <silent><C-s>   <Plug>(neosnippet_jump_or_expand)
#   smap <silent><C-s>   <Plug>(neosnippet_jump_or_expand)
#   xmap <silent><C-s>   <Plug>(neosnippet_expand_target)
# '''
# hook_source = '''
#   let g:neosnippet#enable_snipmate_compatibility = 1
#   let g:neosnippet#enable_completed_snippet = 1
#   " let g:neosnippet#enable_complete_done = 1
#   let g:neosnippet#expand_word_boundary = 1
#   let g:neosnippet#snippets_directory = $VIM_CONFIG_HOME . '/snippets'
# '''

# Tag/include sources for neocomlete/deoplete/ncm2
[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_if = 1

# Vim source for neocomplete/deoplete
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

# Auto close parentheses
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertCharPre'
hook_source = '''
  let g:lexima_ctrlh_as_backspace = 1
'''
hook_post_source = '''
  call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
  call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
  call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
'''

# Auto create TAG files
[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
if = "executable('ctags')"
on_path = '.*'
hook_add = '''
  let g:gutentags_cache_dir = $VIM_CACHE_HOME . '/tags'
  let g:gutentags_generate_on_missing = 0
  let g:gutentags_generate_on_new = 0
  let g:gutentags_generate_on_save = 1
  let g:gutentags_exclude_filetype = []
  let g:gutentags_ctags_exclude_wildignore = 1
  let g:gutentags_ctags_exclude = [
        \ '*/build', '*/wp-admin', '*/wp-content', '*/wp-includes',
        \ '*/application/vendor', '*/vendor/ckeditor', '*/media/vendor'
        \ ]
'''

#==============================================================================
# Commands
#==============================================================================

# Utility commands for dein.vim
[[plugins]]
repo = 'haya14busa/dein-command.vim'
depends = ['dein.vim']
on_cmd = ['Dein']

# View and search LSP symbols and tags in Vim/NeoVim
[[plugins]]
repo = 'liuchengxu/vista.vim'
depends = ['coc.nvim', 'lightline.vim']
on_cmd = ['Vista', 'Vista!', 'Vista!!']
hook_add = '''
  " toggle vista view window
  nnoremap <silent> <Space>v  :<C-u>Vista!!<CR>

  let g:vista_default_executive = 'ctags'
  let g:vista_executive_for = {
       \ 'c':          'coc',
       \ 'cpp':        'coc',
       \ 'css':        'coc',
       \ 'fortran':    'coc',
       \ 'go':         'coc',
       \ 'html':       'coc',
       \ 'java':       'coc',
       \ 'javascript': 'coc',
       \ 'json':       'coc',
       \ 'objc':       'coc',
       \ 'objcpp':     'coc',
       \ 'python':     'coc',
       \ 'ruby':       'coc',
       \ 'rust':       'coc',
       \ 'tex':        'coc',
       \ 'vim':        'coc',
       \ 'yaml':       'coc',
       \ }
'''

# Perform the replacement in |quickfix|
[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['qf']
[plugins.ftplugin]
qf = '''
  nnoremap <buffer> R :<C-u>Qfreplace<CR>
'''

# Navigate windows like tmux's 'display-pane'
[[plugins]]
repo = 't9md/vim-choosewin'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap -  <Plug>(choosewin)
'''

# The interactive scratchpad for hackers
[[plugins]]
repo = 'metakirby5/codi.vim'
on_cmd = ['Codi']

# --- Smart Align
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = ['EasyAlign', 'LiveEasyAlign']
on_map = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
hook_add = '''
  nmap <silent><Leader>a  <Plug>(EasyAlign)
  vmap <silent><Leader>a  <Plug>(EasyAlign)
'''

# --- Switch between single-line and multiline forms of code
[[plugins]]
# use default mapping
#   gS -> SplitjoinSplit
#   gJ -> SplitjoinJoin
repo = 'AndrewRadev/splitjoin.vim'
on_map = {n = '<Plug>Splitjoin'}

# [[plugins]]
# repo = 'paroxayte/vkmap.vim'
# depends = ['vwm.vim']
# on_event = 'VimEnter'
# hook_source = 'source $VIM_CONFIG_HOME/rc/plugins/vkmap.vim'
#
# [plugins.ftplugin]
# vkmap = '''
#   setlocal nolist
#   setlocal listchars=
#   setlocal colorcolumn=""
# '''
#
# [[plugins]]
# repo = 'paroxayte/vwm.vim'
# on_source = 'vkmap.vim'

# Delete buffer without closing window (tig-explorer dependency)
[[plugins]]
repo = 'rbgrouleff/bclose.vim'
on_cmd = ['Bclose']
hook_add = '''
  let g:bclose_no_plugins_maps = 1
  nnoremap <silent> sx  :<C-u>Bclose<CR>
'''

#==============================================================================
# Interfaces
#==============================================================================

# Show document in echo area / popup
[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
  let g:echodoc#enable_at_startup = 1
  let g:echodoc#type = 'virtual'
'''
# SKK imput method for Japanese
[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>'}
hook_add = '''
  imap <C-j>  <Plug>(eskk:toggle)
  cmap <C-j>  <Plug>(eskk:toggle)
'''
hook_source = '''
  let g:eskk#directory = expand('$VIM_CACHE_HOME/eskk')

  let g:eskk#dictionary = {
        \ 'path': expand('$VIM_CACHE_HOME/skk-jisyo'),
        \ 'sorted': 1,
        \ 'encoding': 'utf-8',
        \ }

  if IsMac()
    let g:eskk#large_dictionary = {
          \ 'path': '~/Library/Application\ Support/AquaSKK/SKK-JISYO.L',
          \ 'sorted': 1,
          \ 'encoding': 'euc-jp',
          \ }
  elseif IsWindows()
    let g:eskk#large_dictionary = {
          \ 'path': '~/SKK-JISYO.L',
          \ 'sorted': 1,
          \ 'encoding': 'euc-jp',
          \ }
  else
    let g:eskk#large_dictionary = {
          \ 'path': '/usr/local/share/skk/SKK-JISYO.L',
          \ 'sorted': 1,
          \ 'encoding': 'euc-jp',
          \ }
  endif

  let g:eskk#server = { 'host': 'localhost', 'port': 1178 }

  " --- Henkan, annotation
  let g:eskk#show_annotation = 1

  let g:eskk#keep_state = 0
  let g:eskk#debug = 0
  let g:eskk#show_annotation = 1
  let g:eskk#egg_like_newline = 1
  let g:eskk#egg_like_newline_completion = 1
  let g:eskk#tab_select_completion = 1
  let g:eskk#start_completion_length = 2

  " --- easy escape with 'jj'
  autocmd MyAutoCmd User eskk-initialize-post EskkMap -remap jj <ESC>
'''

# Smart commenter
[[plugins]]
repo = 'tyru/caw.vim'
depends = ['context_filetype.vim']
on_map = {nv = '<Plug>'}
hook_add = '''
  let g:caw_no_default_keymappings = 1

  nmap <Leader>cc  <Plug>(caw:hatpos:toggle)
  xmap <Leader>cc  <Plug>(caw:hatpos:toggle)
  nmap <Leader>ca  <Plug>(caw:dollarpos:toggle)
  xmap <Leader>ca  <Plug>(caw:dollarpos:toggle)
  nmap <Leader>cb  <Plug>(caw:box:toggle)
  xmap <Leader>cb  <Plug>(caw:box:toggle)
  nmap <Leader>cw  <Plug>(caw:wrap:toggle)
  xmap <Leader>cw  <Plug>(caw:wrap:toggle)
  nmap <Leader>c]  <Plug>(caw:jump:comment-next)
  nmap <Leader>c[  <Plug>(caw:jump:comment-prev)
'''

# Make blockwise visual mode more useful
[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {nx = '<Plug>'}
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

# Vim motions on speed!
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = {n = '<Plug>'}
hook_add = '''
  " Search and jump
  nmap sf <Plug>(easymotion-overwin-f)
  nmap ss <Plug>(easymotion-overwin-f2)
  vmap ss <Plug>(easymotion-s2)
  omap ss <Plug>(easymotion-s2)

  map  sh <Plug>(easymotion-linebackward)
  map  sj <Plug>(easymotion-j)
  map  sk <Plug>(easymotion-k)
  map  sl <Plug>(easymotion-lineforward)

  map  s/ <Plug>(easymotion-sn)
  omap s/ <Plug>(easymotion-tn)
  map  sn <Plug>(easymotion-next)
  map  sp <Plug>(easymotion-prev)

  " smart f & F (visual mode and operator mode)
  nmap f <Plug>(easymotion-sl)
  omap f <Plug>(easymotion-bd-fl)
  xmap f <Plug>(easymotion-bd-fl)
  omap F <Plug>(easymotion-Fl)
  xmap F <Plug>(easymotion-Fl)
  omap t <Plug>(easymotion-tl)
  xmap t <Plug>(easymotion-tl)
  omap T <Plug>(easymotion-Tl)
  xmap T <Plug>(easymotion-Tl)
'''
hook_source = '''
  " Disable default mappings
  let g:EasyMotion_do_mapping = 0
  " Do not shade
  let g:EasyMotion_do_shade = 0
  " Use uppercase target labels (and type as a lowercase)
  let g:EasyMotion_use_upper = 1
  " Characters used for target labels
  let g:EasyMotion_keys = ';HKLYUIONM,WERTXCVBASDGJF'
  " Smartcase ('v' matches both 'v' and 'V', while 'V' does only 'V')
  let g:EasyMotion_smartcase = 1
  " Smartsign ('1' matches both '1' and '!' -> not used)
  let g:EasyMotion_use_smartsign_us = 0
  " keep cursor column
  let g:EasyMotion_startofline = 0
  " Don't skip folded line
  let g:EasyMotion_skipfoldedline = 0
  " pseudo-migemo
  let g:EasyMotion_use_migemo = 1
  " Jump to first with enter & space
  let g:EasyMotion_space_jump_first = 1
  " Prompt
  let g:EasyMotion_prompt = 'Search for {n} chars> '
'''

# Move to the edge!
[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_map = {nv = '<Plug>'}
hook_add = '''
  map  gj  <Plug>(edgemotion-j)
  map  gk  <Plug>(edgemotion-k)
  xmap gj  <Plug>(edgemotion-j)
  xmap gk  <Plug>(edgemotion-k)
'''

# Accerlerate up-down moving!
[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

#  Extended J command
[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {nx = '<Plug>'}
hook_add = '''
  nmap J  <Plug>(jplus)
  vmap J  <Plug>(jplus)

  " Insert one or more characters when join
  nmap <Leader>J  <Plug>(jplus-input)
  vmap <Leader>J  <Plug>(jplus-input)
'''

# Fast folding
[[plugins]]
repo = 'Konfekt/FastFold'
on_event = 'BufEnter'
hook_add = '''
  " Global variables
  let g:fastfold_savehook = 1
  let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
  let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
  " Update folds
  nmap zuz      <Plug>(FastFoldUpdate)
  " Create a fold text object
  xnoremap iz  :<C-u>FastFoldUpdate<CR><ESC>:<C-u>normal! ]zv[z<CR>
  xnoremap az  :<C-u>FastFoldUpdate<CR><ESC>:<C-u>normal! ]zV[z<CR>
'''

# Calendar
[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = 'Calendar'
hook_source = '''
  let g:calendar_google_calendar = 1
  let g:calendar_google_task = 1
'''

# Set the buffer filetype based on the code block
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
on_event = 'BufEnter'

# [DO]cument [GE]nerator
[[plugins]]
repo = 'kkoomen/vim-doge'
on_event = 'BufEnter'
hook_add = '''
  " 'reST', 'numpy', or 'google'
  let g:doge_doc_standard_python = 'numpy'
  " Key mappings
  let g:doge_mapping = '<Leader>d'
  let g:doge_mapping_comment_jump_forward  = '<M-n>'
  let g:doge_mapping_comment_jump_backward = '<M-p>'
'''

#==============================================================================
# Textobj/Operator extensions
#==============================================================================

[[plugins]]
repo = 'machakann/vim-sandwich'
#on_map = {nxo = '<Plug>'}
on_path = '.*'
hook_add = '''
	let g:sandwich_no_default_key_mappings = 1

  silent! nmap <unique><silent> sd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  silent! nmap <unique><silent> sr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  silent! nmap <unique><silent> sdb <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  silent! nmap <unique><silent> srb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)

  " operator
  silent! nmap <unique> sa <Plug>(operator-sandwich-add)
  silent! xmap <unique> sa <Plug>(operator-sandwich-add)
  silent! omap <unique> sa <Plug>(operator-sandwich-g@)

  silent! xmap <unique> sd <Plug>(operator-sandwich-delete)

  silent! xmap <unique> sr <Plug>(operator-sandwich-replace)

  " textobj
  silent! omap <unique> ib <Plug>(textobj-sandwich-auto-i)
  silent! xmap <unique> ib <Plug>(textobj-sandwich-auto-i)
  silent! omap <unique> ab <Plug>(textobj-sandwich-auto-a)
  silent! xmap <unique> ab <Plug>(textobj-sandwich-auto-a)

  silent! omap <unique> is <Plug>(textobj-sandwich-query-i)
  silent! xmap <unique> is <Plug>(textobj-sandwich-query-i)
  silent! omap <unique> as <Plug>(textobj-sandwich-query-a)
  silent! xmap <unique> as <Plug>(textobj-sandwich-query-a)
'''
hook_source = '''
  let g:textobj#sandwich#stimeoutlen = 100

  " Custom recipes
  let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
  let g:sandwich#recipes += [{'buns' : ['「', '」']}]
  let g:sandwich#recipes += [{'buns' : ['【', '】']}]
  let g:sandwich#recipes += [{'buns' : ['（', '）']}]
  let g:sandwich#recipes += [{'buns' : ['『', '』']}]

  " \(, \) pair and \%(, \) pair in Vim script
  let g:sandwich#recipes += [
        \ {'buns' : ['\(', '\)'],  'filetype' : ['vim'], 'nesting' : 1},
        \ {'buns' : ['\%(', '\)'], 'filetype' : ['vim'], 'nesting' : 1},
        \ ]
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = ['vim-operator-user']
hook_add = '''
  nmap R <Plug>(operator-replace)
  xmap R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = ['vim-textobj-user']
on_func = 'textobj#user#'
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_entire_no_default_key_mappings = 1
  omap ae <Plug>(textobj-entire-a)
  omap ie <Plug>(textobj-entire-i)
  xmap ae <Plug>(textobj-entire-a)
  xmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_line_no_default_key_mappings = 1
  omap al <Plug>(textobj-line-a)
  omap il <Plug>(textobj-line-i)
  xmap al <Plug>(textobj-line-a)
  xmap il <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'thinca/vim-textobj-comment'
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_comment_no_default_key_mappings = 1
  omap ac <Plug>(textobj-comment-a)
  omap ic <Plug>(textobj-comment-i)
  xmap ac <Plug>(textobj-comment-a)
  xmap ic <Plug>(textobj-comment-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-fold'
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_fold_no_default_key_mappings = 1
  omap az <Plug>(textobj-fold-a)
  omap iz <Plug>(textobj-fold-i)
  xmap az <Plug>(textobj-fold-a)
  xmap iz <Plug>(textobj-fold-i)
'''

[[plugins]]
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_url_no_default_key_mappings = 1
  omap au <Plug>(textobj-url-a)
  omap iu <Plug>(textobj-url-i)
  xmap au <Plug>(textobj-url-a)
  xmap iu <Plug>(textobj-url-i)
'''

[[plugins]]
repo = 'machakann/vim-textobj-delimited'
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_delimited_no_defautl_key_mappings = 1

  omap ad <Plug>(textobj-delimited-forward-a)
  omap id <Plug>(textobj-delimited-forward-i)
  xmap ad <Plug>(textobj-delimited-forward-a)
  xmap id <Plug>(textobj-delimited-forward-i)
'''

# --- Expand region
[[plugins]]
repo = 'terryma/vim-expand-region'
depends = ['vim-sandwich', 'vim-textobj-delimited']
on_map = {x = '<Plug>'}
hook_add = '''
  "ad: textobj-delimeted"
  "ib: sandwich"
  let g:expand_region_text_objects = {
        \ 'iw'  : 0,
        \ 'iW'  : 0,
        \ 'iu'  : 0,
        \ 'ad'  : 1,
        \ 'ib'  : 1,
        \ 'il'  : 1,
        \ 'ip'  : 0,
        \ 'ie'  : 0,
        \ }

  xmap v  <Plug>(expand_region_expand)
  xmap V  <Plug>(expand_region_shrink)
'''

#==============================================================================
# VCS (Git)
#==============================================================================

# Git wrapper
[[plugins]]
repo = 'tpope/vim-fugitive'
on_source = ['coc.nvim']
on_cmd = ['Git', 'Gcd', 'Glcd', 'Gstatus', 'Gcommit', 'Gmerge', 'Gpull',
          'Grebase', 'Gpush', 'Gfetch', 'Ggrep', 'Glgrep', 'Glog', 'Gllog',
          'Gedit', 'Gsplit', 'Gvsplit', 'Gpedit', 'Gtabedit', 'Gpedit',
          'Gread', 'Gwrite', 'Gwq', 'Gdiff', 'Gsdiff', 'Gvdiff', 'Gmove',
          'Grename', 'Gblame', 'Gbrowse']
on_func = 'fugitive#'

# Show a git diff in the gutter (sign column)
# [[plugins]]
# repo = 'airblade/vim-gitgutter'
# on_event = 'BufEnter'
# hook_add = '''
#   nmap <silent> <Leader>hp  <Plug>(GitGutterPrevHunk)
#   nmap <silent> <Leader>hs  <Plug>(GitGutterStageHunk)
#   nmap <silent> <Leader>hu  <Plug>(GitGutterUndoHunk)
#
#   nmap ]h  <Plug>(GitGutterNextHunk)
#   nmap [h  <Plug>(GitGutterPrevHunk)
#   omap ih  <Plug>(GitGutterTextObjectInnerPending)
#   omap ah  <Plug>(GitGutterTextObjectOuterPending)
#   xmap ih  <Plug>(GitGutterTextObjectInnerVisual)
#   xmap ah  <Plug>(GitGutterTextObjectOuterVisual)
# '''

# Use Tig as a git client on vim
[[plugins]]
repo = 'iberianpig/tig-explorer.vim'
depends = ['bclose.vim']
on_cmd = ['TigOpenCurrentFile', 'TigOpenProjectRootDir', 'TigGrep', 'TigGrep',
          'TigGrepResume', 'TigBlame']
hook_add = '''
  let g:tig_explorer_keymap_edit    = '<C-o>'
  let g:tig_explorer_keymap_tabedit = '<C-t>'
  let g:tig_explorer_keymap_split   = '<C-s>'
  let g:tig_explorer_keymap_vsplit  = '<C-v>'

  nnoremap <silent> <Space>tb  :TigBlame<CR>
  nnoremap <silent> <Space>tt  :TigOpenCurrentFile<CR>
  nnoremap <silent> <Space>tp  :TigOpenProjectRootDir<CR>
  nnoremap <silent> <Space>t/  :TigGrep<CR>
  nnoremap <silent> <Space>t*  :<C-u>:TigGrep<Space><C-R><C-W><CR>
  vnoremap <silent> <Space>t*  y:TigGrep<Space><C-R>"<CR>
  nnoremap <silent> <Space>tr  :TigGrepResume<CR>
'''

# More pleasant editing on commit messages
[[plugins]]
repo = 'rhysd/committia.vim'
on_path = 'COMMIT_EDITMSG'
hook_source = '''
  let g:committia_min_window_width = 100
'''

# Reveal the commit messages under the cursor
[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = ['GitMessenger']
on_map = {n = '<Plug>(git-messenger'}

#==============================================================================
# Filetypes, Syntax
#==============================================================================

# LaTeX
[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_source = 'source $VIM_CONFIG_HOME/rc/plugins/vimtex.vim'

# Python
[[plugins]]
repo = 'lambdalisue/vim-pyenv'
on_ft = 'python'

[[plugins]]
repo = 'tmhedberg/SimpylFold'
on_ft = 'python'

[[plugins]]
repo = 'raimon49/requirements.txt.vim'
on_ft = 'requirements'

# CSV
[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = 'csv'

# Markdown
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_math = 1
  let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

# Markdown live preview
[[plugins]]
repo = 'iamcco/markdown-preview.vim'
build = 'cd app && yarn install'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
hook_source = '''
  let g:mkdp_refresh_slow = 1
'''

# Hex editor
[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = 1
'''
