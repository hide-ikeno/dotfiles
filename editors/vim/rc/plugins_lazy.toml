 # === Plugins (lazy loading) ===

#------------------------------------------------------------------------------
# Denite
#------------------------------------------------------------------------------
# Dark powered asynchronous unite all interfaces for Neovim/Vim8
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['vim-qfreplace']
on_cmd = 'Denite'
hook_add = 'call rc#plugin#denite#hook_add()'
hook_source = 'call rc#plugin#denite#hook_source()'

# Freaky fast fuzzy Denite/CrtlP matcher for vim/neovim
[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = '''
  let g:fruzzy#usenative = 1
  let g:fruzzy#sortonempty = 0
'''
hook_post_update = 'call fruzzy#install()'

# Denite plugin for temporary files
[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'denite.nvim'
hook_source = '''
  let g:junkfile#directory = $VIM_CACHE_HOME . '/junkfile'
'''

# Denite plugin for MRU
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

# Denite plugin for yank history
[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = 'denite.nvim'

# Denite location andd quickfix lists
[[plugins]]
repo = 'chemzqm/unite-location'
on_source = 'denite.nvim'

# Denite source for ghq list
[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

# Simple session manager with denite interface
[[plugins]]
repo = 'lambdalisue/session.vim'
on_source = 'denite.nvim'
hook_source = '''
  let g:session_dir = $VIM_CACHE_HOME . '/session'
  let g:session#default_opener = 'edit'
  let g:session#default_session = 'default'
'''

#------------------------------------------------------------------------------
# Auto completion
#------------------------------------------------------------------------------
# --- Dark powered asynchronous completion framework for neovim/Vim8
# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# depends = ['context_filetype.vim']
# on_event = 'InsertEnter'
# hook_source = 'call rc#plugin#deoplete#hook_source()'
# hook_post_source = 'call rc#plugin#deoplete#hook_post_source()'

# ---
[[plugins]]
repo = 'neoclide/coc.nvim'
depends = ['denite.nvim']
on_event = 'VimEnter'
hook_source = 'call rc#plugin#coc#hook_source()'
hook_post_source = 'call rc#plugin#coc#hook_post_source()'
hook_post_update = 'call rc#plugin#coc#hook_post_update()'

[[plugins]]
repo = 'neoclide/coc-neco'
depends = ['neco-vim', 'coc.nvim']
on_source = 'coc.nvim'

[[plugins]]
repo = 'jsfaint/coc-neoinclude'
depends = ['neoinclude.vim', 'coc.nvim']
on_source = 'coc.nvim'

# --- Deoplete sources
[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_if = 1

# --- Source for Vim script
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

# --- Auto close parentheses
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertCharPre'
hook_source = '''
  let g:lexima_ctrlh_as_backspace = 1
'''
hook_post_source = '''
  call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
  call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
  call lexima#add_rule({'char': '<BS>',  'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
'''

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  imap <silent><C-s>  <Plug>(neosnippet_expand_or_jump)
  smap <silent><C-s>  <Plug>(neosnippet_expand_or_jump)
  xmap <silent><C-s>  <Plug>(neosnippet_expand_target)

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#snippets_directory = $VIM_CONFIG_HOME . '/snippets'

  autocmd MyAutoCmd CompleteDone * call neosnippet#complete_done()
'''

#-----------------------------------------------------------------------------
# Commands
#-----------------------------------------------------------------------------
# Dark ppowered file explorer implementation
[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = ['Defx']
hook_add = '''
  nnoremap <silent><Leader>f  :<C-u>Defx<CR>
'''
hook_source = 'call rc#plugin#defx#hook_source()'
[plugins.ftplugin]
defx = 'call rc#plugin#defx#on_filetype()'

# Git status implementation for Defx
[[plugins]]
repo = 'kristijanhusak/defx-git'
on_source = 'defx.nvim'

# Filetype icons for Defx
[[plugins]]
repo = 'kristijanhusak/defx-icons'
on_source = 'defx.nvim'

# Perform the replacement in |quickfix|
[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['qf']
[plugins.ftplugin]
qf = '''
  nnoremap <buffer> R :<C-u>Qfreplace<CR>
'''

# Navigate windows like tmux's 'display-pane'
[[plugins]]
repo = 't9md/vim-choosewin'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap -   <Plug>(choosewin)
'''

# The interactive scratchpad for hackers
[[plugins]]
repo = 'metakirby5/codi.vim'
on_cmd = ['Codi']

# # Git wrapper
# [[plugins]]
# repo = 'neoclide/vim-easygit'
# on_cmd = ['Gcd', 'Glcd', 'Gblame', 'GcommitCurrent', 'GdiffThis', 'Gcommit',
#           'Gedit', 'Gdiff', 'Gremove', 'Grename', 'Gmove', 'Gcheckout',
#           'Gpush', 'Gpull', 'Gfetch', 'Gadd', 'Gstatus', 'Ggrep', 'Gmerge']
# hook_source = '''
#   let g:easygit_enable_command = 1
# '''
#
# # Git operations
# [[plugins]]
# repo = 'lambdalisue/gina.vim'
# on_cmd = 'Gina'
# hook_add = 'call rc#plugin#gina#hook_add()'
# hook_post_source = 'call rc#plugin#gina#hook_post_source()'

# --- Use Tig as a git client on vim
[[plugins]]
repo = 'iberianpig/tig-explorer.vim'
on_cmd = ['TigOpenCurrentFile', 'TigOpenProjectRootDir', 'TigGrep', 'TigGrep',
          'TigGrepResume', 'TigBlame']
hook_add = '''
  let g:tig_explorer_keymap_edit    = '<C-o>'
  let g:tig_explorer_keymap_tabedit = '<C-t>'
  let g:tig_explorer_keymap_split   = '<C-s>'
  let g:tig_explorer_keymap_vsplit  = '<C-v>'
'''

# --- Smart Align
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = ['EasyAlign', 'LiveEasyAlign']
hook_add = '''
  vnoremap <Enter> :EasyAlign<CR>
'''
on_map = {x = '<Plug>'}

# --- Diffs on blocks of code
[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff', 'LinediffAdd', 'LinediffReset', 'LinediffShow']
hook_add = '''
  vnoremap <Leader>df :Linediff<CR>
  vnoremap <Leader>da :LinediffAdd<CR>
  nnoremap <Leader>ds :<C-u>LinediffShow<CR>
  nnoremap <Leader>dr :<C-u>LinediffReset<CR>
'''

# --- Switch between single-line and multiline forms of code
[[plugins]]
# use default mapping
#   gS -> SplitjoinSplit
#   gJ -> SplitjoinJoin
repo = 'AndrewRadev/splitjoin.vim'
on_map = {n = '<Plug>Splitjoin'}

#----------------------------------------------------------------------------et-
# Interfaces
#-----------------------------------------------------------------------------
# SKK imput method for Japanese
[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>'}
hook_add = 'call rc#plugin#eskk#hook_add()'
hook_source = 'call rc#plugin#eskk#hook_source()'

# Make blockwise visual mode more useful
[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {n = '<Plug>'}

# Vim motions on speed!
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = {n = '<Plug>'}
hook_add = 'call rc#plugin#easymotion#hook_add()'
hook_source = 'call rc#plugin#easymotion#hook_source()'

# Move to the edge!
[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_map = {nv = '<Plug>'}
hook_add = '''
  map  <C-j>  <Plug>(edgemotion-j)
  map  <C-k>  <Plug>(edgemotion-k)
  xmap <C-j>  <Plug>(edgemotion-j)
  xmap <C-k>  <Plug>(edgemotion-k)
'''

# Accerlerate up-down moving!
[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

#  Extended J command
[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {nx = '<Plug>'}
hook_add = '''
  nmap J  <Plug>(jplus)
  vmap J  <Plug>(jplus)

  " Insert one or more characters when join
  nmap <Leader>J  <Plug>(jplus-input)
  vmap <Leader>J  <Plug>(jplus-input)
'''

# Quickly highlight <cword> or visually selected word
[[plugins]]
repo   = 't9md/vim-quickhl'
on_map = {nv = '<Plug>'}
hook_add = '''
  " TODO: key mapping conflict
  nmap <Leader>, <Plug>(quickhl-manual-this)
  xmap <Leader>, <Plug>(quickhl-manual-this)
'''

# Smart commenter
[[plugins]]
repo = 'tyru/caw.vim'
depends = ['context_filetype.vim']
on_map = {nv = '<Plug>'}
hook_add = '''
  let g:caw_no_default_keymappings = 1

  nmap gcc  <Plug>(caw:hatpos:toggle)
  xmap gcc  <Plug>(caw:hatpos:toggle)
  nmap gca  <Plug>(caw:dollarpos:toggle)
  xmap gca  <Plug>(caw:dollarpos:toggle)
  nmap gcb  <Plug>(caw:box:toggle)
  xmap gcb  <Plug>(caw:box:toggle)
  nmap gcw  <Plug>(caw:wrap:toggle)
  xmap gcw  <Plug>(caw:wrap:toggle)
  nmap gco  <Plug>(caw:jump:comment-next)
  nmap gcO  <Plug>(caw:jump:comment-prev)
'''

# Fast folding
[[plugins]]
repo = 'Konfekt/FastFold'
on_event = 'BufEnter'
hook_add = '''
  " Update folds
  nmap zuz      <Plug>(FastFoldUpdate)
  " Create a fold text object
  xnoremap iz  :<C-u>FastFoldUpdate<CR><ESC>:<C-u>normal! ]zv[z<CR>
  xnoremap az  :<C-u>FastFoldUpdate<CR><ESC>:<C-u>normal! ]zV[z<CR>
'''
hook_source = '''
  let g:fastfold_savehook = 1
  let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
  let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
'''

# Indent based folding of anything and everything
[[plugins]]
repo = 'pseewald/vim-anyfold'
on_event = 'BufEnter'
hook_source = '''
  let g:anyfold_fold_comments = 1
  let g:anyfold_fold_size_str = '[%s lines]'

  " Activate anyfold by default on every filetype except listed below.
  let g:AnyFoldExclude = ['diff', 'help', 'denite', 'defx', 'qf']

  augroup anyfold
    autocmd!
    autocmd Filetype * if index(g:AnyFoldExclude, &ft) < 0 | AnyFoldActivate
  augroup END

  " Disable anyfold for large files
  let g:LargeFile = 1000000 " file is large if size greater than 1MB
  autocmd BufReadPre,BufRead * let f=getfsize(expand("<afile>")) |
      \ if f > g:LargeFile || f == -2 | call LargeFile() | endif

  function LargeFile()
    augroup anyfold
      autocmd! " remove AnyFoldActivate
      " fall back to indent folding
      autocmd Filetype * if index(g:AnyFoldExclude, &ft) < 0 |
          \ setlocal foldmethod=indent
    augroup END
  endfunction
'''

# Calendar
[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = 'Calendar'
hook_source = '''
  let g:calendar_google_calendar = 1
  let g:calendar_google_task = 1
'''

# Show a git diff in the gutter and stages/undoes hunks
[[plugins]]
repo = 'airblade/vim-gitgutter'
if = 'has("signs")'
on_path = '.*'
hook_add = '''
  " remap keys to jump between hunk
  nmap ]h  <Plug>GitGutterNextHunk
  nmap [h  <Plug>GitGutterPrevHunk
'''

# More pleasant editing on commit messages
[[plugins]]
repo = 'rhysd/committia.vim'
on_path = 'COMMIT_EDITMSG'
hook_source = '''
  let g:committia_min_window_width = 100
'''

#------------------------------------------------------------------------------
# Textobj/Operator extensions
#------------------------------------------------------------------------------
[[plugins]]
repo = 'machakann/vim-sandwich'
#on_map = {nxo = '<Plug>'}
on_path = '.*'
hook_add = 'call rc#plugin#sandwich#hook_add()'
hook_source = 'call rc#plugin#sandwich#hook_source()'

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = ['vim-textobj-user']
on_func = 'textobj#user#'
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_entire_no_default_key_mappings = 1
  omap ae <Plug>(textobj-entire-a)
  omap ie <Plug>(textobj-entire-i)
  xmap ae <Plug>(textobj-entire-a)
  xmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_line_no_default_key_mappings = 1
  omap al <Plug>(textobj-line-a)
  omap il <Plug>(textobj-line-i)
  xmap al <Plug>(textobj-line-a)
  xmap il <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'thinca/vim-textobj-comment'
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_comment_no_default_key_mappings = 1
  omap ac <Plug>(textobj-comment-a)
  omap ic <Plug>(textobj-comment-i)
  xmap ac <Plug>(textobj-comment-a)
  xmap ic <Plug>(textobj-comment-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-fold'
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_fold_no_default_key_mappings = 1
  omap az <Plug>(textobj-fold-a)
  omap iz <Plug>(textobj-fold-i)
  xmap az <Plug>(textobj-fold-a)
  xmap iz <Plug>(textobj-fold-i)
'''

[[plugins]]
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_url_no_default_key_mappings = 1
  omap au <Plug>(textobj-url-a)
  omap iu <Plug>(textobj-url-i)
  xmap au <Plug>(textobj-url-a)
  xmap iu <Plug>(textobj-url-i)
'''

[[plugins]]
repo = 'machakann/vim-textobj-delimited'
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_delimited_no_defautl_key_mappings = 1

  omap ad <Plug>(textobj-delimited-forward-a)
  omap id <Plug>(textobj-delimited-forward-i)
  xmap ad <Plug>(textobj-delimited-forward-a)
  xmap id <Plug>(textobj-delimited-forward-i)
'''

# --- Move function arguments left and right
[[plugins]]
repo = 'AndrewRadev/sideways.vim'
on_map = {ox = '<Plug>Sideways'}
hook_add = '''
  nnoremap <silent>sh   :<C-u>SidewaysLeft<CR>
  nnoremap <silent>sl   :<C-u>SidewaysRight<CR>

  omap <silent> a,  <Plug>SidewaysArgumentTextobjA
  xmap <silent> a,  <Plug>SidewaysArgumentTextobjA
  omap <silent> i,  <Plug>SidewaysArgumentTextobjI
  xmap <silent> i,  <Plug>SidewaysArgumentTextobjI
'''

# --- Expand region
[[plugins]]
repo = 'terryma/vim-expand-region'
depends = ['vim-sandwich', 'vim-textobj-delimited']
on_map = {x = '<Plug>'}
hook_add = '''
  "ad: textobj-delimeted"
  "ib: sandwich"
  let g:expand_region_text_objects = {
        \ 'iw'  : 0,
        \ 'iW'  : 0,
        \ 'iu'  : 0,
        \ 'ad'  : 1,
        \ 'ib'  : 1,
        \ 'il'  : 1,
        \ 'ip'  : 0,
        \ 'ie'  : 0,
        \ }

  xmap v  <Plug>(expand_region_expand)
  xmap V  <Plug>(expand_region_shrink)
'''

#-----------------------------------------------------------------------------
# Language, Filetypes
#-----------------------------------------------------------------------------
# --- Print document on echo area
[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = 'call echodoc#enable()'

# --- Asynchronous Lint Engine (ALE)
[[plugins]]
repo = 'w0rp/ale'
on_path = '.*'
hook_add = 'call rc#plugin#ale#hook_add()'
hook_source = 'call rc#plugin#ale#hook_source()'

# # --- Language server protocol (LSP) client
# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# depends = ['deoplete.nvim', 'denite.nvim']
# rev = 'next'
# build = 'bash install.sh'
# on_ft = ['c', 'cpp', 'python', 'rust', 'sh']
# hook_source = 'call rc#plugin#LanguageClient#hook_source()'

# --- LaTeX
[[plugins]]
repo = 'lervag/vimtex'
# depends = ['deoplete.nvim']
on_ft = 'tex'
hook_source = 'call rc#plugin#vimtex#hook_source()'

# --- Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
# hook_source = '''
#   let g:rustfmt_autosave = 1
# '''

# --- Python
[[plugins]]
repo = 'plytophogy/vim-virtualenv'
on_ft = 'python'
on_source = '''
  let g:virtualenv_directory = $PYENV_ROOT . '/versions'
'''

[[plugins]]
repo = 'tmhedberg/SimpylFold'
on_ft = 'python'

[[plugins]]
repo = 'raimon49/requirements.txt.vim'
on_ft = 'requirements'

# --- HTML/CSS/Javascript
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'jsx', 'javascript', 'javascript.jsx']

# --- CSV
[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = 'csv'

# --- Markdown
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_math = 1
  let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

# Generate table of contents for Markdown file
[[plugins]]
repo = 'mzlogin/vim-markdown-toc'
on_cmd = ['GenTocGFM', 'GenTocRedcarpet', 'GenTocGitLab', 'UpdateToc']
hook_source = '''
  let g:vmt_auto_update_on_save = 0
'''

# Markdown live preview
[[plugins]]
repo = 'iamcco/mathjax-support-for-mkdp'
on_ft = 'markdown'
depends = ['markdown-preview.vim']

[[plugins]]
repo = 'iamcco/markdown-preview.vim'
on_ft = 'markdown'
hook_source = '''
  let g:mkdp_refresh_slow = 1
'''

# --- Emmet
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'jsx', 'javascript', 'javascript.jsx']

# --- Hex editor
[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = 1
'''

