 # === Plugins (lazy loading) ===

# Denite {{{
# -----
# Dark powered asynchronous unite all interfaces for Neovim/Vim8
#
[[plugins]]
repo = 'Shougo/denite.nvim' # {{{
depends = ['vim-qfreplace']
on_cmd = 'Denite'
hook_add = '''
  function! s:get_selection(cmdtype) abort
    let l:temp = @s
    normal! gv"sy
    let @/ = substitute(escape(@s, '\'.a:cmdtype), '\n', '\\n', 'g')
    let @s = l:temp
  endfunction

  " --- Key mappings
  " Substitute search commands by Denite line
  nnoremap <silent> / :<C-u>Denite line -buffer-name=search -auto-highlight<CR>
  nnoremap <silent> * :<C-u>DeniteCursorWord line -buffer-name=search -auto-highlight -mode=normal<CR>
  nnoremap <silent> n :<C-u>Denite -resume -buffer-name=search -auto-highlight -mode=normal -refresh<CR>

  nnoremap <silent> L  :<C-u>Denite location_list -buffer-name=list<CR>
  nnoremap <silent> Q  :<C-u>Denite quickfix -buffer-name=list<CR>

  " Buffer
  nnoremap <silent> <Leader>b :<C-u>Denite buffer file/old -default-action=switch -mode=normal<CR>
  " File
  nnoremap <silent> <Leader>f :<C-u>Denite file/point file/old file/rec file file:new -sorters=sorter/rank<CR>

  " nnoremap <silent> <Leader>o  :<C-u>Denite outline<CR>
  nnoremap <silent> <Leader>/  :<C-u>Denite grep -no-empty -buffer-name=search -mode=normal<CR>
  nnoremap <silent> <Leader>*  :<C-u>DeniteCursorWord grep -no-empty -buffer-name=search -mode=normal<CR>
  vnoremap <silent> <Leader>*  :<C-u>call <SID>get_selection('/')<CR>
        \ :execute 'Denite grep:::'.@/.' -no-empty -buffer-name=search -mode=normal'<CR><CR>

  nnoremap <silent> <Leader>h  :<C-u>Denite help<CR>
  nnoremap <silent> <Leader>j  :<C-u>Denite jump change file/point<CR>
  nnoremap <silent> <Leader>r  :<C-u>Denite resume<CR>
  nnoremap <silent> <Leader>v  :<C-u>Denite register neoyank -buffer-name=register<CR>
  xnoremap <silent> <Leader>v  :<C-u>Denite register neoyank -buffer-name=register -default-action=replace<CR>
  nnoremap <silent> <Leader><Leader>  :<C-u>Denite command command_history<CR>

  nnoremap <silent><expr> <Leader>[  &filetype == 'help' ? ":\<C-u>pop\<CR>" :
        \ ":\<C-u>Denite -mode=normal jump\<CR>"
  nnoremap <silent><expr> <Leader>]  &filetype == 'help' ? "g\<C-]>" :
        \ ":\<C-u>DeniteCursorWord -buffer-name=tag tag:include\<CR>"
  " " Plugins managed by 'Dein'
  " nnoremap <silent> [Denite]N  :<C-u>Denite dein<CR>
  " " Repositories managed by 'ghq'
  " nnoremap <silent> [Denite]P  :<C-u>Denite ghq<CR>
'''
hook_source = 'source $VIM_CONFIG_HOME/rc/plugins/denite.vim'
# }}}

# Freaky fast fuzzy Denite/CrtlP matcher for vim/neovim
[[plugins]]
repo = 'raghur/fruzzy' # {{{
on_source = ['denite.nvim']
hook_source = '''
  let g:fruzzy#usenative = 1
  let g:fruzzy#sortonempty = 0
'''
hook_post_update = 'call fruzzy#install()'
# }}}

# Denite plugin for temporary files
[[plugins]]
repo = 'Shougo/junkfile.vim' # {{{
on_source = ['denite.nvim']
hook_source = '''
  let g:junkfile#directory = $VIM_CACHE_HOME . '/junkfile'
'''
# }}}

# Denite plugin for MRU
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim']

# Denite plugin for yank history
[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']

# Denite location andd quickfix lists
[[plugins]]
repo = 'chemzqm/unite-location'
on_source = ['denite.nvim']

# Denite source for ghq list
[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = ['denite.nvim']
# }}}

# Coc.nvim {{{
# -----
# Complete engine and Language Server support for neovim & vim,
# featured as VSCode
#
[[plugins]]
repo = 'neoclide/coc.nvim' # {{{
depends = ['denite.nvim']
on_event = 'VimEnter'
hook_source = '''
  " Utility funcitons for key mapping
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction

  function! s:ShowDocumentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " --- Insert mode key mapping for auto completion
  " Use <TAB> for trigger completion with characters ahead and navigate.
  inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" : coc#refresh()
  " Use <S-TAB> for completion back
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
  " Use <CR> for confirm completion.
  "   `<C-g>u` means break undo chain at current position.
  "    Coc only does snippet and additional edit on confirm.
  inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
  " Use <c-space> for trigger completion.
  inoremap <silent><expr> <C-Space> coc#refresh()
  " Custom complete
  imap <silent> <C-x><C-u>  <Plug>(coc-complete-custom)

  " CocList
  nnoremap <silent> <Leader>cn  :<C-u>CocNext<CR>
  nnoremap <silent> <Leader>cp  :<C-u>CocPrev<CR>
  nnoremap <silent> <Leader>cr  :<C-u>CocListResume<CR>

  nnoremap <silent> <Leader>cc  :<C-u>CocList commands<CR>
  nnoremap <silent> <Leader>cd  :<C-u>CocList --normal --auto-preview diagnostics<CR>
  nnoremap <silent> <Leader>ce  :<C-u>CocList --normal --number-select extensions<CR>
  nnoremap <silent> <Leader>cj  :<C-u>CocList location<CR>
  nnoremap <silent> <Leader>cl  :<C-u>CocList --normal --number-select lists<CR>
  nnoremap <silent> <Leader>cL  :<C-u>CocList links<CR>
  nnoremap <silent> <Leader>co  :<C-u>CocList --auto-preview outline<CR>
  nnoremap <silent> <Leader>cO  :<C-u>CocList output<CR>
  nnoremap <silent> <Leader>cs  :<C-u>CocList --interactive symbols<CR>
  nnoremap <silent> <Leader>cS  :<C-u>CocList --normal --number-select sources<CR>

  " --- Key mappings for LSP features
  " show list of diagnostic info
  nmap     <silent><LocalLeader>a   :<C-u>CocList diagnostics<CR>
  " codeaction
  nmap     <silent><LocalLeader>ca  <Plug>(coc-codeaction)
  vmap     <silent><LocalLeader>ca  <Plug>(coc-codeaction-selected)
  " codelens
  nmap     <silent><LocalLeader>cl  <Plug>(coc-codelens-action)
  " go to definition
  nmap     <silent><LocalLeader>d   <Plug>(coc-definition)
  " go to declaration
  nmap     <silent><LocalLeader>D   <Plug>(coc-declaration)
  " format selected region
  vmap     <silent><LocalLeader>f   <Plug>(coc-format-selected)
  " format buffer
  nmap     <silent><LocalLeader>f   <Plug>(coc-format)
  " fix current line
  nmap     <silent><LocalLeader>F   <Plug>(coc-fix-current)
  " document hover
  nmap     <silent><LocalLeader>h   :<C-u>call <SID>ShowDocumentation()<CR>
  " go to implementation
  nmap     <silent><LocalLeader>i   <Plug>(coc-implementation)
  " show diagnostic info
  nmap     <silent><LocalLeader>I   <Plug>(coc-diagnostic-info)
  " jump to next diagnostic position
  nmap     <silent><LocalLeader>n   <Plug>(coc-diagnostic-next)
  " show symbols in the current file
  nnoremap <silent><LocalLeader>o   :<C-u>CocList --auto-preview outline<CR>
  " jump to previous diagnostic position
  nmap     <silent><LocalLeader>p   <Plug>(coc-diagnostic-prev)
  " go to reference
  nmap     <silent><LocalLeader>r   <Plug>(coc-reference)
  " rename the symbol
  nmap     <silent><LocalLeader>R   <Plug>(coc-rename)
  " show workspace symbols
  nnoremap <silent><LocalLeader>s   :<C-u>CocList --interactive symbols<CR>
  " go to type-definition
  nmap     <silent><LocalLeader>t   <Plug>(coc-type-definition)

  function! s:CocLspSettings() abort
    " Key mappings (buffer local)
    nmap     <silent><buffer> <C-p> <Plug>(coc-diagnostic-prev)
    nmap     <silent><buffer> <C-n> <Plug>(coc-diagnostic-next)

    nmap     <silent><buffer> gd <Plug>(coc-definition)
    nmap     <silent><buffer> gq <Plug>(coc-format-selected)
    vmap     <silent><buffer> gq <Plug>(coc-format-selected)
    nnoremap <silent><buffer> K  :<C-u>call <SID>ShowDocumentation()<CR>

    " formatexpr from language server
    setlocal formatexpr=CocAction('formatSelected')
  endfunction

  function! s:CocLspCclsSettings() abort
    call s:CocLspSettings()
    " --- Navigation to declarations with <C-h>, <C-j>, <C-k>, <C-l>
    " 'D' => first child declaration
    nnoremap <silent><buffer> <C-l> :call CocLocations('ccls','$ccls/navigate',{'direction':'D'})<CR>
    " 'L' => previous declaration
    nnoremap <silent><buffer> <C-k> :call CocLocations('ccls','$ccls/navigate',{'direction':'L'})<CR>
    " 'R' => next declaration
    nnoremap <silent><buffer> <C-j> :call CocLocations('ccls','$ccls/navigate',{'direction':'R'})<CR>
    " 'U' => parent declaration
    nnoremap <silent><buffer> <C-h> :call CocLocations('ccls','$ccls/navigate',{'direction':'U'})<CR>

    " --- Cross reference extensions
    " bases
    nnoremap <silent><buffer> <LocalLeader>xb :call CocLocations('ccls','$ccls/inheritance')<CR>
    " bases of up to 3 levels
    nnoremap <silent><buffer> <LocalLeader>xb :call CocLocations('ccls','$ccls/inheritance',{'levels':3})<CR>
    " derived
    nnoremap <silent><buffer> <LocalLeader>xd :call CocLocations('ccls','$ccls/inheritance',{'derived':v:true})<CR>
    " derived of up to 3 levels
    nnoremap <silent><buffer> <LocalLeader>xD :call CocLocations('ccls','$ccls/inheritance',{'derived':v:true,'levels':3})<CR>

    " caller
    nnoremap <silent><buffer> <LocalLeader>xc :call CocLocations('ccls','$ccls/call')<CR>
    " callee
    nnoremap <silent><buffer> <LocalLeader>xC :call CocLocations('ccls','$ccls/call',{'callee':v:true})<CR>

    " $ccls/member
    " member variables / variables in a namespace
    nnoremap <silent><buffer> <LocalLeader>xm :call CocLocations('ccls','$ccls/member')<CR>
    " member functions / functions in a namespace
    nnoremap <silent><buffer> <LocalLeader>xf :call CocLocations('ccls','$ccls/member',{'kind':3})<CR>
    " nested classes / types in a namespace
    nnoremap <silent><buffer> <LocalLeader>xs :call CocLocations('ccls','$ccls/member',{'kind':2})<CR>

    nmap     <silent><buffer> <LocalLeader>xt <Plug>(coc-type-definition)<CR>
    nnoremap <silent><buffer> <LocalLeader>xv :call CocLocations('ccls','$ccls/vars')<CR>
    nnoremap <silent><buffer> <LocalLeader>xV :call CocLocations('ccls','$ccls/vars',{'kind':1})<CR>
  endfunction

  " --- Autocmd
  augroup MyAutoCmd
    " Highlight symbols under cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')
    " Trigger signature help
    autocmd CursorHoldI,CursorMovedI call CocActionAsync('showSignatureHelp')
    autocmd User CocJumpPlaceholder  call CocActionAsync('showSignatureHelp')
    autocmd FileType typescript,json,python,ruby,rust,sh,vim,yaml
          \ call s:CocLspSettings()
    autocmd FileType c,cpp,objc,objcpp call s:CocLspCclsSettings()
  augroup END
'''
hook_post_source = 'source $VIM_CONFIG_HOME/rc/plugins/coc.vim'
hook_post_update = 'call coc#util#install()'
# }}}

# Auto completion sources {{{
[[plugins]]
repo = 'neoclide/coc-neco'
depends = ['neco-vim', 'coc.nvim']
on_source = 'coc.nvim'

[[plugins]]
repo = 'jsfaint/coc-neoinclude'
depends = ['neoinclude.vim', 'coc.nvim']
on_source = 'coc.nvim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'
# }}}
# }}}

# Auto completion {{{
[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_if = 1

# --- Auto close parentheses
[[plugins]]
repo = 'cohama/lexima.vim' # {{{
on_event = 'InsertCharPre'
hook_source = '''
  let g:lexima_ctrlh_as_backspace = 1
'''
hook_post_source = '''
  call lexima#add_rule(
        \ {'char': '$', 'input_after': '$', 'filetype': 'latex'}
        \ )
  call lexima#add_rule(
        \ {'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'}
        \ )
  call lexima#add_rule(
        \ {'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'}
        \ )
'''
# }}}

[[plugins]]
repo = 'Shougo/neosnippet' # {{{
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  imap <silent><C-s>  <Plug>(neosnippet_expand_or_jump)
  smap <silent><C-s>  <Plug>(neosnippet_expand_or_jump)
  xmap <silent><C-s>  <Plug>(neosnippet_expand_target)

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#snippets_directory = $VIM_CONFIG_HOME . '/snippets'

  autocmd MyAutoCmd CompleteDone * call neosnippet#complete_done()
'''
# }}}

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
if = "executable('ctags')"
on_path = '.*'
hook_add = '''
  let g:gutentags_cache_dir           = $VIM_CACHE_HOME . '/tags'
  let g:gutentags_generate_on_missing = 0
  let g:gutentags_generate_on_new     = 0
  let g:gutentags_generate_on_save    = 1
  let g:gutentags_exclude_filetype    = []
  let g:gutentags_ctags_exclude_wildignore = 1
  let g:gutentags_ctags_exclude = [
        \ '*/build', '*/wp-admin', '*/wp-content', '*/wp-includes',
        \ '*/application/vendor', '*/vendor/ckeditor', '*/media/vendor'
        \ ]
'''
# }}}

# Commands {{{
# -----
# Utility commands for dein.vim
[[plugins]]
repo = 'haya14busa/dein-command.vim' # {{{
depends = ['dein.vim']
on_cmd = ['Dein']
# }}}

# Defx --- Dark ppowered file explorer implementation {{{
[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = ['Defx']
hook_add = '''
  nnoremap <silent><Leader>e  :<C-u>Defx<CR>
'''
hook_source = '''
  call defx#custom#option('_', {
        \ 'columns': 'icons:git:filename:type',
        \ 'winwidth': 30,
        \ 'split': 'vertical',
        \ 'direction': 'topleft'
        \ })
  call defx#custom#column('mark', {
        \ 'directory_icon': '▸',
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓',
        \ })
'''
[plugins.ftplugin]
defx = '''
  " Define mappings
  nnoremap <silent><buffer><expr> <CR> defx#async_action('drop')
  nnoremap <silent><buffer><expr> c    defx#do_action('copy')
  nnoremap <silent><buffer><expr> !    defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> m    defx#do_action('move')
  nnoremap <silent><buffer><expr> p    defx#do_action('paste')
  nnoremap <silent><buffer><expr> l    defx#async_action('open')
  nnoremap <silent><buffer><expr> E    defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P    defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K    defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N    defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M    defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C    defx#do_action('toggle_columns', 'mark:filename:type:size:time')
  nnoremap <silent><buffer><expr> S    defx#do_action('toggle_sort', 'Time')
  nnoremap <silent><buffer><expr> d    defx#do_action('remove_trash')
  nnoremap <silent><buffer><expr> r    defx#do_action('rename')
  nnoremap <silent><buffer><expr> x    defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> >    defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> .    defx#do_action('repeat')
  nnoremap <silent><buffer><expr> yy   defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> h    defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~    defx#do_action('cd')
  nnoremap <silent><buffer><expr> \    defx#do_action('cd', getcwd())
  nnoremap <silent><buffer><expr> q    defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *    defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j    line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k    line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
  nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
        \ ':<C-u>wincmd w<CR>' :
        \ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
'''

# --- Defx extensions
# Git status implementation for Defx
[[plugins]]
repo = 'kristijanhusak/defx-git'
on_source = 'defx.nvim'

# Filetype icons for Defx
[[plugins]]
repo = 'kristijanhusak/defx-icons'
on_source = 'defx.nvim'
# }}}

# Simple session manager with denite interface
[[plugins]]
repo = 'lambdalisue/session.vim' # {{{
on_cmd = ['SessionList', 'SessionOpen', 'SessionRemove', 'SessionSave']
hook_source = '''
  let g:session_dir = $VIM_CACHE_HOME . '/session'
  let g:session#default_opener = 'edit'
  let g:session#default_session = 'default'

  nnoremap <silent> <Leader>Sa  :<C-u>SessionOpen last<CR>
  nnoremap <silent> <Leader>Sl  :<C-u>SessionList<CR>
  nnoremap <silent> <Leader>So  :<C-u>SessionOpen<CR>
  nnoremap <silent> <Leader>Sr  :<C-u>SessionRemove<CR>
  nnoremap <silent> <Leader>Ss  :<C-u>SessionSave
'''
hook_post_source = '''
  if exists('g:loaded_session')
    call session#last#enable()
  endif
'''
# }}}

# Perform the replacement in |quickfix|
[[plugins]]
repo = 'thinca/vim-qfreplace' # {{{
on_ft = ['qf']
[plugins.ftplugin]
qf = '''
  nnoremap <buffer> R :<C-u>Qfreplace<CR>
'''
# }}}

# Navigate windows like tmux's 'display-pane'
[[plugins]]
repo = 't9md/vim-choosewin' # {{{
on_map = {n = '<Plug>'}
hook_add = '''
  nmap -           <Plug>(choosewin)
  nmap [Window]w   <Plug>(choosewin)
'''
# }}}

# The interactive scratchpad for hackers
[[plugins]]
repo = 'metakirby5/codi.vim'
on_cmd = ['Codi']

# --- Smart Align
[[plugins]]
repo = 'junegunn/vim-easy-align' # {{{
on_cmd = ['EasyAlign', 'LiveEasyAlign']
hook_add = '''
  vnoremap <Enter> :EasyAlign<CR>

  nmap <silent><Leader>xa  <Plug>(EasyAlign)
  vmap <silent><Leader>xa  <Plug>(EasyAlign)
'''
# }}}

# --- Diffs on blocks of code
[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff', 'LinediffAdd', 'LinediffReset', 'LinediffShow']

# --- Switch between single-line and multiline forms of code
[[plugins]]
# use default mapping
#   gS -> SplitjoinSplit
#   gJ -> SplitjoinJoin
repo = 'AndrewRadev/splitjoin.vim'
on_map = {n = '<Plug>Splitjoin'}

# --- Displays available keybindingss in pupup
[[plugins]]
repo = 'liuchengxu/vim-which-key' # {{{
on_cmd = ['WhichKey', 'WhichKey!', 'WhichKeyVisual', 'WhichKeyVisual!']
hook_add = '''
  nnoremap <silent><Leader>      :<C-u>WhichKey '<Space>'<CR>
  vnoremap <silent><Leader>      :<C-u>WhichKeyVisual '<Space>'<CR>
  nnoremap <silent><LocalLeader> :<C-u>WhichKey ';'<CR>
  vnoremap <silent><LocalLeader> :<C-u>WhichKeyVisual ';'<CR>
  nnoremap <silent>s             :<C-u>WhichKey 's'<CR>
  vnoremap <silent>s             :<C-u>WhichKeyVisual 's'<CR>
'''
hook_source = 'source $VIM_CONFIG_HOME/rc/plugins/which_key.vim'
# }}}
# }}}

# Interfaces {{{
# -----
# Print document on echo area
[[plugins]]
repo = 'Shougo/echodoc.vim' # {{{
on_event = 'CompleteDone'
hook_source = 'call echodoc#enable()'
# }}}

# SKK imput method for Japanese
[[plugins]]
repo = 'tyru/eskk.vim' # {{{
on_map = {ic = '<Plug>'}
hook_add = '''
  imap <C-j>  <Plug>(eskk:toggle)
  cmap <C-j>  <Plug>(eskk:toggle)
'''
hook_source = 'source $VIM_CONFIG_HOME/rc/plugins/eskk.vim'
# }}}

# Smart commenter
[[plugins]]
repo = 'tyru/caw.vim' # {{{
depends = ['context_filetype.vim']
on_map = {nv = '<Plug>'}
hook_add = '''
  let g:caw_no_default_keymappings = 1

  nmap gcc  <Plug>(caw:hatpos:toggle)
  xmap gcc  <Plug>(caw:hatpos:toggle)
  nmap gca  <Plug>(caw:dollarpos:toggle)
  xmap gca  <Plug>(caw:dollarpos:toggle)
  nmap gcb  <Plug>(caw:box:toggle)
  xmap gcb  <Plug>(caw:box:toggle)
  nmap gcw  <Plug>(caw:wrap:toggle)
  xmap gcw  <Plug>(caw:wrap:toggle)
  nmap gco  <Plug>(caw:jump:comment-next)
  nmap gcO  <Plug>(caw:jump:comment-prev)
'''
# }}}

# Make blockwise visual mode more useful
[[plugins]]
repo = 'kana/vim-niceblock' # {{{
on_map = {nx = '<Plug>'}
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''
# }}}

# Vim motions on speed!
[[plugins]]
repo = 'easymotion/vim-easymotion' # {{{
on_map = {n = '<Plug>'}
hook_add = '''
  " Search and jump
  nmap sf <Plug>(easymotion-overwin-f)
  nmap ss <Plug>(easymotion-overwin-f2)
  vmap ss <Plug>(easymotion-s2)
  omap ss <Plug>(easymotion-s2)

  map  sh <Plug>(easymotion-linebackward)
  map  sj <Plug>(easymotion-j)
  map  sk <Plug>(easymotion-k)
  map  sl <Plug>(easymotion-lineforward)

  map  s/ <Plug>(easymotion-sn)
  omap s/ <Plug>(easymotion-tn)
  map  sn <Plug>(easymotion-next)
  map  sp <Plug>(easymotion-prev)

  " smart f & F (visual mode and operator mode)
  omap f <Plug>(easymotion-bd-fl)
  xmap f <Plug>(easymotion-bd-fl)
  omap F <Plug>(easymotion-Fl)
  xmap F <Plug>(easymotion-Fl)
  omap t <Plug>(easymotion-tl)
  xmap t <Plug>(easymotion-tl)
  omap T <Plug>(easymotion-Tl)
  xmap T <Plug>(easymotion-Tl)
'''
hook_source = '''
  " Disable default mappings
  let g:EasyMotion_do_mapping = 0
  " Do not shade
  let g:EasyMotion_do_shade = 0
  " Use uppercase target labels (and type as a lowercase)
  let g:EasyMotion_use_upper = 1
  " Characters used for target labels
  let g:EasyMotion_keys = ';HKLYUIONM,WERTXCVBASDGJF'
  " Smartcase ('v' matches both 'v' and 'V', while 'V' does only 'V')
  let g:EasyMotion_smartcase = 1
  " Smartsign ('1' matches both '1' and '!' -> not used)
  let g:EasyMotion_use_smartsign_us = 0
  " keep cursor column
  let g:EasyMotion_startofline = 0
  " Don't skip folded line
  let g:EasyMotion_skipfoldedline = 0
  " pseudo-migemo
  let g:EasyMotion_use_migemo = 1
  " Jump to first with enter & space
  let g:EasyMotion_space_jump_first = 1
  " Prompt
  let g:EasyMotion_prompt = 'Search for {n} chars> '
'''

# Incremental search improved {{{
# [[plugins]]
# repo = 'haya14busa/is.vim'
# depends = ['vim-asterisk', 'vim-anzu']
# on_map = {nv = '<Plug>'}
# hook_add = '''
#   " Combine with vim-anzu
#   map n <Plug>(is-nohl)<Plug>(anzu-n-with-echo)
#   map N <Plug>(is-nohl)<Plug>(anzu-N-with-echo)
#   " Combine with vim-asterisk
#   map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
#   map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
#   map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
#   map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
# '''

# *-improved
# [[plugins]]
# repo = 'osyo-manga/vim-anzu'
# on_map = {nv = '<Plug>'}
# }}}

# Move to the edge!
[[plugins]]
repo = 'haya14busa/vim-edgemotion' # {{{
on_map = {nv = '<Plug>'}
hook_add = '''
  map  gj  <Plug>(edgemotion-j)
  map  gk  <Plug>(edgemotion-k)
  xmap gj  <Plug>(edgemotion-j)
  xmap gk  <Plug>(edgemotion-k)
'''
# }}}

# Accerlerate up-down moving!
[[plugins]]
repo = 'rhysd/accelerated-jk' # {{{
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''
# }}}

#  Extended J command
[[plugins]]
repo = 'osyo-manga/vim-jplus' # {{{
on_map = {nx = '<Plug>'}
hook_add = '''
  nmap J  <Plug>(jplus)
  vmap J  <Plug>(jplus)

  " Insert one or more characters when join
  nmap <Leader>J  <Plug>(jplus-input)
  vmap <Leader>J  <Plug>(jplus-input)
'''
# }}}

# Fast folding
[[plugins]]
repo = 'Konfekt/FastFold' # {{{
on_event = 'BufEnter'
hook_add = '''
  " Update folds
  nmap zuz      <Plug>(FastFoldUpdate)
  " Create a fold text object
  xnoremap iz  :<C-u>FastFoldUpdate<CR><ESC>:<C-u>normal! ]zv[z<CR>
  xnoremap az  :<C-u>FastFoldUpdate<CR><ESC>:<C-u>normal! ]zV[z<CR>
'''
hook_source = '''
  let g:fastfold_savehook = 1
  let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
  let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
'''
# }}}

# Calendar
[[plugins]]
repo = 'itchyny/calendar.vim' # {{{
on_cmd = 'Calendar'
hook_source = '''
  let g:calendar_google_calendar = 1
  let g:calendar_google_task = 1
'''
# }}}

# Set the buffer filetype based on the code block
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
on_event = 'BufEnter'
# }}}

# }}}

# Textobj/Operator extensions {{{
# -----
[[plugins]]
repo = 'machakann/vim-sandwich' # {{{
#on_map = {nxo = '<Plug>'}
on_path = '.*'
hook_add = '''
	let g:sandwich_no_default_key_mappings = 1

  silent! nmap <unique><silent> sd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  silent! nmap <unique><silent> sr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
  silent! nmap <unique><silent> sdb <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
  silent! nmap <unique><silent> srb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)

  " operator
  silent! nmap <unique> sa <Plug>(operator-sandwich-add)
  silent! xmap <unique> sa <Plug>(operator-sandwich-add)
  silent! omap <unique> sa <Plug>(operator-sandwich-g@)

  silent! xmap <unique> sd <Plug>(operator-sandwich-delete)

  silent! xmap <unique> sr <Plug>(operator-sandwich-replace)

  " textobj
  silent! omap <unique> ib <Plug>(textobj-sandwich-auto-i)
  silent! xmap <unique> ib <Plug>(textobj-sandwich-auto-i)
  silent! omap <unique> ab <Plug>(textobj-sandwich-auto-a)
  silent! xmap <unique> ab <Plug>(textobj-sandwich-auto-a)

  silent! omap <unique> is <Plug>(textobj-sandwich-query-i)
  silent! xmap <unique> is <Plug>(textobj-sandwich-query-i)
  silent! omap <unique> as <Plug>(textobj-sandwich-query-a)
  silent! xmap <unique> as <Plug>(textobj-sandwich-query-a)
'''
hook_source = '''
  let g:textobj#sandwich#stimeoutlen = 100

  " Custom recipes
  let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
  let g:sandwich#recipes += [{'buns' : ['「', '」']}]
  let g:sandwich#recipes += [{'buns' : ['【', '】']}]
  let g:sandwich#recipes += [{'buns' : ['（', '）']}]
  let g:sandwich#recipes += [{'buns' : ['『', '』']}]

  " \(, \) pair and \%(, \) pair in Vim script
  let g:sandwich#recipes += [
        \ {'buns' : ['\(', '\)'],  'filetype' : ['vim'], 'nesting' : 1},
        \ {'buns' : ['\%(', '\)'], 'filetype' : ['vim'], 'nesting' : 1},
        \ ]
'''
# }}}

[[plugins]]
repo = 'kana/vim-operator-replace' # {{{
depends = ['vim-operator-user']
hook_add = '''
  nmap R <Plug>(operator-replace)
  xmap R <Plug>(operator-replace)
'''
# }}}

[[plugins]]
repo = 'kana/vim-textobj-entire' # {{{
depends = ['vim-textobj-user']
on_func = 'textobj#user#'
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_entire_no_default_key_mappings = 1
  omap ae <Plug>(textobj-entire-a)
  omap ie <Plug>(textobj-entire-i)
  xmap ae <Plug>(textobj-entire-a)
  xmap ie <Plug>(textobj-entire-i)
'''
# }}}

[[plugins]]
repo = 'kana/vim-textobj-line' # {{{
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_line_no_default_key_mappings = 1
  omap al <Plug>(textobj-line-a)
  omap il <Plug>(textobj-line-i)
  xmap al <Plug>(textobj-line-a)
  xmap il <Plug>(textobj-line-i)
'''
# }}}

[[plugins]]
repo = 'thinca/vim-textobj-comment' # {{{
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_comment_no_default_key_mappings = 1
  omap ac <Plug>(textobj-comment-a)
  omap ic <Plug>(textobj-comment-i)
  xmap ac <Plug>(textobj-comment-a)
  xmap ic <Plug>(textobj-comment-i)
'''
# }}}

[[plugins]]
repo = 'kana/vim-textobj-fold' # {{{
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_fold_no_default_key_mappings = 1
  omap az <Plug>(textobj-fold-a)
  omap iz <Plug>(textobj-fold-i)
  xmap az <Plug>(textobj-fold-a)
  xmap iz <Plug>(textobj-fold-i)
'''
# }}}

[[plugins]]
repo = 'mattn/vim-textobj-url' #{{{
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_url_no_default_key_mappings = 1
  omap au <Plug>(textobj-url-a)
  omap iu <Plug>(textobj-url-i)
  xmap au <Plug>(textobj-url-a)
  xmap iu <Plug>(textobj-url-i)
'''
# }}}

[[plugins]]
repo = 'machakann/vim-textobj-delimited' # {{{
on_map = {ox = '<Plug>'}
hook_add = '''
  let g:textobj_delimited_no_defautl_key_mappings = 1

  omap ad <Plug>(textobj-delimited-forward-a)
  omap id <Plug>(textobj-delimited-forward-i)
  xmap ad <Plug>(textobj-delimited-forward-a)
  xmap id <Plug>(textobj-delimited-forward-i)
'''
# }}}

# --- Expand region
[[plugins]]
repo = 'terryma/vim-expand-region' # {{{
depends = ['vim-sandwich', 'vim-textobj-delimited']
on_map = {x = '<Plug>'}
hook_add = '''
  "ad: textobj-delimeted"
  "ib: sandwich"
  let g:expand_region_text_objects = {
        \ 'iw'  : 0,
        \ 'iW'  : 0,
        \ 'iu'  : 0,
        \ 'ad'  : 1,
        \ 'ib'  : 1,
        \ 'il'  : 1,
        \ 'ip'  : 0,
        \ 'ie'  : 0,
        \ }

  xmap v  <Plug>(expand_region_expand)
  xmap V  <Plug>(expand_region_shrink)
'''
# }}}
# }}}

# Linter {{{
# --- Asynchronous Lint Engine (ALE)
[[plugins]]
repo = 'w0rp/ale' # {{{
on_path = '.*'
hook_add = '''
  " jump errors
  nmap <silent> <Leader>aj  <Plug>(ale_previous_wrap)
  nmap <silent> <Leader>ak  <Plug>(ale_next_wrap)
  " Fix (auto-format) the buffer
  nmap <silent> <Leader>af  <Plug>(ale_fix)
'''
hook_source = 'source $VIM_CONFIG_HOME/rc/plugins/ale.vim'
# }}}
# }}}

# VCS (Git) {{{
# -----
# Use Tig as a git client on vim
[[plugins]]
repo = 'iberianpig/tig-explorer.vim' # {{{
on_cmd = ['TigOpenCurrentFile', 'TigOpenProjectRootDir', 'TigGrep', 'TigGrep',
          'TigGrepResume', 'TigBlame']
hook_add = '''
  let g:tig_explorer_keymap_edit    = '<C-o>'
  let g:tig_explorer_keymap_tabedit = '<C-t>'
  let g:tig_explorer_keymap_split   = '<C-s>'
  let g:tig_explorer_keymap_vsplit  = '<C-v>'
'''
# }}}

# Asynchronously control git repositories in Neovim/Vim 8
[[plugins]]
repo = 'lambdalisue/gina.vim' # {{{
on_cmd = ['Gina', 'Gina!', 'Gina!!']
hook_add = '''
  nnoremap <silent> <Leader>gs :<C-u>Gina status<CR>
  nnoremap <silent> <Leader>gc :<C-u>Gina commit<CR>
  nnoremap <silent> <Leader>gC :<C-u>Gina commit --amend<CR>
  nnoremap <silent> <Leader>gb :<C-u>Gina branch -av<CR>
  nnoremap <silent> <Leader>gt :<C-u>Gina tag<CR>
  nnoremap <silent> <Leader>g/ :<C-u>Gina grep<CR>
  nnoremap <silent> <Leader>gq :<C-u>Gina qrep<CR>
  nnoremap <silent> <Leader>gA :<C-u>Gina changes HEAD<CR>
  nnoremap <silent> <Leader>gd :<C-u>Gina changes origin/HEAD...<CR>
  nnoremap <silent> <Leader>gl :<C-u>Gina log<CR>
  nnoremap <silent> <Leader>gL :<C-u>Gina log :%<CR>
  nnoremap <silent> <Leader>gf :<C-u>Gina ls<CR>
  nnoremap <silent> <Leader>grs :<C-u>Gina show <C-r><C-w><CR>
  nnoremap <silent> <Leader>grc :<C-u>Gina changes <C-r><C-w><CR>
'''
hook_post_source = 'source $VIM_CONFIG_HOME/rc/plugins/gina.vim'
# }}}

# Show a git diff in the gutter and stages/undoes hunks
[[plugins]]
repo = 'airblade/vim-gitgutter'
if = 'has("signs")'
on_path = '.*'
hook_add = '''
  " remap keys to jump between hunk
  nmap ]h  <Plug>GitGutterNextHunk
  nmap [h  <Plug>GitGutterPrevHunk
'''

# More pleasant editing on commit messages
[[plugins]]
repo = 'rhysd/committia.vim'
on_path = 'COMMIT_EDITMSG'
hook_source = '''
  let g:committia_min_window_width = 100
'''
# }}}

# Filetypes, Syntax {{{
# -----
# LaTeX {{{
[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_source = 'source $VIM_CONFIG_HOME/rc/plugins/vimtex.vim'
# }}}

# Python {{{
[[plugins]]
repo = 'plytophogy/vim-virtualenv'
on_ft = 'python'
on_source = '''
  let g:virtualenv_directory = $PYENV_ROOT . '/versions'
'''

[[plugins]]
repo = 'tmhedberg/SimpylFold'
on_ft = 'python'

[[plugins]]
repo = 'raimon49/requirements.txt.vim'
on_ft = 'requirements'
# }}}

# HTML/CSS/Javascript {{{
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'jsx', 'javascript', 'javascript.jsx']
# }}}

# CSV {{{
[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = 'csv'
# }}}

# Markdown {{{
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_math = 1
  let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

# Generate table of contents for Markdown file
[[plugins]]
repo = 'mzlogin/vim-markdown-toc'
on_cmd = ['GenTocGFM', 'GenTocRedcarpet', 'GenTocGitLab', 'UpdateToc']
hook_source = '''
  let g:vmt_auto_update_on_save = 0
'''

# Markdown live preview
[[plugins]]
repo = 'iamcco/mathjax-support-for-mkdp'
on_ft = 'markdown'
depends = ['markdown-preview.vim']

[[plugins]]
repo = 'iamcco/markdown-preview.vim'
on_ft = 'markdown'
hook_source = '''
  let g:mkdp_refresh_slow = 1
'''
# }}}

# Hex editor {{{
[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = 1
'''
# }}}

# }}}

#-----------------------------------------------------------------------------
# vim: foldmethod=marker
