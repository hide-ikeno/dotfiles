#------------------------------------------------------------------------------
# Plugin manager
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/dein.vim'

#------------------------------------------------------------------------------
# Asyncronous execution
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

#------------------------------------------------------------------------------
# Vim help in Japanese
#------------------------------------------------------------------------------
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  set helplang=ja,en
'''

#------------------------------------------------------------------------------
# Highlight
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

#------------------------------------------------------------------------------
# Textobj extensions
#------------------------------------------------------------------------------
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'

#------------------------------------------------------------------------------
# Operator extensions
#------------------------------------------------------------------------------
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['vim-operator-user']
hood_add = '''
  " operator mappings
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)
'''

#------------------------------------------------------------------------------
# Colorscheme
#------------------------------------------------------------------------------
[[plugins]]
repo = 'flazz/vim-colorschemes'
script-type = 'colors'

[[plugins]]
repo = 'altercation/vim-colors-solarized'
script-type = 'colors'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'

[[plugins]]
repo = 'maximbaz/lightline-ale'
hook_add = '''
  let g:lightline#ale#indicator_warnings = "\uf071"
  let g:lightline#ale#indicator_errors   = "\uf00d"
  let g:lightline#ale#indicator_ok       = "\uf00c"
'''

# Create tmux powerline theme from vim powerline theme
# (requires powerline/vim-airline/lightline)
[[plugins]]
repo = 'edkolev/tmuxline.vim'

#------------------------------------------------------------------------------
# Filetypes
#------------------------------------------------------------------------------
[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'rcmdnk/vim-markdown'
hook_add = '''
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_math = 1
'''

#-----------------------------------------------------------------------------
# Editor config
#-----------------------------------------------------------------------------
# Need to install EditorConfig core command
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
  let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
'''

#------------------------------------------------------------------------------
# Git
#------------------------------------------------------------------------------
[[plugins]]
repo = 'airblade/vim-gitgutter'
if = 'has("signs")'

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
  " Set default options for commands
  call gina#custom#command#option('status', '--opener', 'split')

  call gina#custom#command#option('commit', '--verbose')

  call gina#custom#command#option(
    \ '/\%(branch\|changes\|grep\|log\)',
    \ '--opener', 'vsplit'
    \)

  " execute :Gina commit with '<C-c><C-c>' on gina-status buffer
  call gina#custom#mapping#nmap(
    \ 'status', '<C-c><C-c>', ':<C-u>Gina commit<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)

  " quit gina-status buffer with 'q'
  call gina#custom#mapping#nmap(
    \ 'status', 'q', ':quit<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)

  nnoremap <Space>gs :<C-u>Gina status<CR>
  nnoremap <Space>gb :<C-u>Gina branch<CR>
  nnoremap <Space>gc :<C-u>Gina commit<CR>
  nnoremap <Space>gl :<C-u>Gina log<CR>
'''

#------------------------------------------------------------------------------
# Programming
#------------------------------------------------------------------------------
# Language server protocol (LSP) client
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
on_ft = ['c', 'cpp', 'python', 'rust']
hook_add = '''
  set hidden
  let g:LanguageClient_serverCommands = {
    \ 'c':   ['/usr/local/opt/llvm/bin/clangd'],
    \ 'cpp': ['/usr/local/opt/llvm/bin/clangd'],
    \ 'python': ['~/.virtualenv/neovim3/.venv/bin/pyls'],
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ }
  let g:LanguageClient_autoStart = 1
  "nnoremap <silent> K    :call LanguageClient_textDocument_hover()<CR>
  "nnoremap <silent> gd   :call LanguageClient_textDocument_definition()<CR>
  "nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''

# Linter
[[plugins]]
repo = 'w0rp/ale'

# Snippet
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

#------------------------------------------------------------------------------
# Extending terminal emulator
#------------------------------------------------------------------------------
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
'''

