#------------------------------------------------------------------------------
# Asyncronous execution
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif executable('gmake')
    let cmd =
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

#------------------------------------------------------------------------------
# Auto completion
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  source $XDG_CONFIG_HOME/nvim/rc/plugins/deoplete.rc.vim
'''
hook_post_update = ':UpdateRemotePlugins()'

#------------------------------------------------------------------------------
# Snippets
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  " <C-k> to insert a snippet
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'
'''

#------------------------------------------------------------------------------
# Detect filetype in the context of current cursor position
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/context_filetype.vim'

# [[plugins]]
# repo = 'osyo-manga/vim-precious'
# depends = ['context_filetype.vim']
# on_event = ['BufNewFile', 'BufRead']

#------------------------------------------------------------------------------
# Denite
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
  call echodoc#enable()
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source $XDG_CONFIG_HOME/nvim/rc/plugins/denite.rc.vim'
hook_add = '''
  " Substitute search commands by denite
  " nnoremap <silent> / :<C-u>Denite
  "   \ -buffer-name=search -auto-highlight line<CR>
  " nnoremap <silent> * :<C-u>DeniteCursorWord
  "   \ -buffer-name=search -auto-highlight -mode=normal line<CR>

  " command history
  " nnoremap <silent> ;; :<C-u>Denite command command_history<CR>

  noremap [Denite]  <Nop>
  nmap <Leader>d    [Denite]

  nnoremap [Denite]h :<C-u>Denite help<CR>

  nnoremap [Denite]r
      \ :<C-u>Denite -buffer-name=register
      \ register neoyank<CR>
  xnoremap [Denite]r
      \ :<C-u>Denite -default-action=replace -buffer-name=register
      \ register neoyank<CR>

  nnoremap [Denite]g
      \ :<C-u>Denite -buffer-name=search -no-empty -mode=normal grep<CR>
'''
hook_post_update = ':UpdateRemotePlugins'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

#-----------------------------------------------------------------------------
# Programming
#-----------------------------------------------------------------------------
repo = 'lambdalisue/vim-pyenv'
# Do not load vim-pyenv until *.py is opened and make sure that it is loaded
# after jedi-vim is loaded.
# depends = 'jedi-vim'
on_ft = ['python', 'python3']

#-----------------------------------------------------------------------------
# SKK
#-----------------------------------------------------------------------------

[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>'}
hook_add = '''
  imap <C-j>     <Plug>(eskk:toggle)
  cmap <C-j>     <Plug>(eskk:toggle)
'''
hook_source = '''
  " --- eskk directory
  let g:eskk#directory = expand('$XDG_CACHE_HOME/eskk')

  " --- user dictionary
  let g:eskk#dictionary = {
    \ 'path': expand('$XDG_CACHE_HOME/skk-jisyo'),
    \ 'sorted': 1,
    \ 'encoding': 'utf-8',
    \ }

  " --- large dictionary
  if has('mac')
    let g:eskk#large_dictionary = {
      \ 'path': '~/Library/Application\ Support/AquaSKK/SKK-JISYO.L',
      \ 'sorted': 1,
      \ 'encoding': 'euc-jp',
      \ }
  elseif has('win32') || has('win64')
    let g:eskk#large_dictionary = {
      \ 'path': '~/SKK-JISYO.L',
      \ 'sorted': 1,
      \ 'encoding': 'euc-jp',
      \ }
  else
    let g:eskk#large_dictionary = {
      \ 'path': '/usr/local/share/skk/SKK-JISYO.L',
      \ 'sorted': 1,
      \ 'encoding': 'euc-jp',
      \ }
  endif

  " --- SKK server
  let g:eskk#server = {
      \ 'host': 'localhost',
      \ 'port': 1178,
      \ }

  " --- Henkan, annotation
  let g:eskk#show_annotation = 1

  " --- easy escape with 'jj'
  autocmd MyAutoCmd User eskk-initialize-post
        \ EskkMap -remap jj <ESC>
'''

#------------------------------------------------------------------------------
# Programming
#------------------------------------------------------------------------------
# Language server protocol (LSP) client
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
on_ft = ['c', 'cpp', 'python', 'rust']
hook_add = '''
  set hidden
  let g:LanguageClient_serverCommands = {
    \ 'c':   ['/usr/local/opt/llvm/bin/clangd'],
    \ 'cpp': ['/usr/local/opt/llvm/bin/clangd'],
    \ 'python': ['~/.virtualenv/neovim3/.venv/bin/pyls'],
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ }
  let g:LanguageClient_autoStart = 1
  "nnoremap <silent> K    :call LanguageClient_textDocument_hover()<CR>
  "nnoremap <silent> gd   :call LanguageClient_textDocument_definition()<CR>
  "nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''

#------------------------------------------------------------------------------
# Leader guide
#------------------------------------------------------------------------------
repo = 'hecal3/vim-leader-guide'
on_event = ['VimEnter']
hook_post_source = '''
  let g:topdict = {}
  let g:topdict[' '] = g:lmap
  let g:topdict[' ']['name'] = '<leader>'
  let g:topdict[','] = g:llmap
  let g:topdict[',']['name'] = '<localleader>'

  " register it with the guide:
  call leaderGuide#register_prefix_descriptions("", "g:topdict")

  " define mappings:
  nnoremap <silent> <Leader>  :<C-u>LeaderGuide       '<Space>'<CR>
  vnoremap <silent> <Leader>  :<C-u>LeaderGuideVisual '<Space>'<CR>
  map               <Leader>.  <Plug>leaderguide-global
  nnoremap <LocalLeader>      :<C-u>LeaderGuide        ','<CR>
  vnoremap <LocalLeader>      :<C-u>LeaderGuideVisual  ','<CR>
  map      <LocalLeader>.      <Plug>leaderguide-buffer<Paste>
'''

