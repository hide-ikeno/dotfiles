#------------------------------------------------------------------------------
# Auto completion
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  source $XDG_CONFIG_HOME/nvim/rc/plugins/deoplete.rc.vim
'''

#------------------------------------------------------------------------------
# Snippets
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  " <C-k> to insert a snippet
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

#------------------------------------------------------------------------------
# Denite
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
  call echodoc#enable()
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source $XDG_CONFIG_HOME/nvim/rc/plugins/denite.rc.vim'
hook_add = '''
  " Substitute search commands by denite
  nnoremap <silent> / :<C-u>Denite
    \ -buffer-name=search -auto-highlight line<CR>
  nnoremap <silent> * :<C-u>DeniteCursorWord
    \ -buffer-name=search -auto-highlight -mode=normal line<CR>

  " command history
  " nnoremap <silent> ;; :<C-u>Denite command command_history<CR>
'''

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

#-----------------------------------------------------------------------------
# Smart commenter
#-----------------------------------------------------------------------------
[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> gc
      silent! xunmap <buffer> gc
      silent! nunmap <buffer> gcc
      silent! xunmap <buffer> gcc
    else
      nmap <buffer> gc <Plug>(caw:prefix)
      xmap <buffer> gc <Plug>(caw:prefix)
      nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
  call InitCaw()
'''

#-----------------------------------------------------------------------------
# Sticky shift in Vim
#-----------------------------------------------------------------------------
[[plugins]]
repo = 'lambdalisue/pinkyless.vim'
on_if = true

#-----------------------------------------------------------------------------
# SKK
#-----------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>'}
hook_add = '''
  imap <C-j>     <Plug>(eskk:toggle)
  cmap <C-j>     <Plug>(eskk:toggle)
'''
hook_source = '''
  " --- eskk directory
  let g:eskk#directory = expand('$XDG_CACHE_HOME/eskk')

  " --- user dictionary
  let g:eskk#dictionary = {
    \ 'path': expand('$XDG_CACHE_HOME/skk-jisyo'),
    \ 'sorted': 1,
    \ 'encoding': 'utf-8',
    \ }

  " --- large dictionary
  if has('mac')
    let g:eskk#large_dictionary = {
      \ 'path': '~/Library/Application\ Support/AquaSKK/SKK-JISYO.L',
      \ 'sorted': 1,
      \ 'encoding': 'euc-jp',
      \ }
  elseif has('win32') || has('win64')
    let g:eskk#large_dictionary = {
      \ 'path': '~/SKK-JISYO.L',
      \ 'sorted': 1,
      \ 'encoding': 'euc-jp',
      \ }
  else
    let g:eskk#large_dictionary = {
      \ 'path': '/usr/local/share/skk/SKK-JISYO.L',
      \ 'sorted': 1,
      \ 'encoding': 'euc-jp',
      \ }
  endif

  " --- SKK server
  let g:eskk#server = {
      \ 'host': 'localhost',
      \ 'port': 1178,
      \ }

  " --- Henkan, annotation
  let g:eskk#show_annotation = 1

  " --- easy escape with 'jj'
  autocmd MyAutoCmd User eskk-initialize-post
        \ EskkMap -remap jj <ESC>
'''


