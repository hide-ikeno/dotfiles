#-----------------------------------------------------------------------------
# Asyncronous execution
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif executable('gmake')
    let cmd =
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

#------------------------------------------------------------------------------
# Auto completion
#------------------------------------------------------------------------------
[[plugins]]
repo             = 'Shougo/deoplete.nvim'
depends          = 'context_filetype.vim'
on_event         = 'InsertEnter'
hook_source      = 'call rc#plugin#deoplete#hook_source()'
hook_post_source = 'call rc#plugin#deoplete#hook_post_source()'

# --- Deoplete sources
[[plugins]]
repo  = 'Shougo/neoinclude.vim'
on_if = 1

#------------------------------------------------------------------------------
# Snippets
#------------------------------------------------------------------------------
[[plugins]]
repo        = 'Shougo/neosnippet'
depends     = ['neosnippet-snippets', 'context_filetype.vim']
on_event    = 'InsertCharPre'
on_ft       = 'snippet'
hook_add    = 'call rc#plugin#neosnippet#hook_add()'
hook_source = 'call rc#plugin#neosnippet#hook_source()'

#------------------------------------------------------------------------------
# Denite
#------------------------------------------------------------------------------
[[plugins]]
repo        = 'Shougo/denite.nvim'
depends     = ['vim-qfreplace']
on_cmd      = 'Denite'
hook_add    = 'call rc#plugin#denite#hook_add()'
hook_source = 'call rc#plugin#denite#hook_source()'

# --- Denite sources
[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

[[plugins]]
repo      = 'Shougo/neoyank.vim'
on_if     = 1
on_event  = 'TextYankPost'
on_source = 'denite.nvim'

[[plugins]]
repo      = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

#-----------------------------------------------------------------------------
# Session manager
#-----------------------------------------------------------------------------
[[plugins]]
repo  = 'lambdalisue/session.vim'
on_source = 'denite.vim'
on_cmd = ['SessionOpen', 'SessionClose', 'SessionSave', 'SessionRemove']
hook_add = '''
  nnoremap <Space>ss :<C-u>SessionSave<CR>
  nnoremap <Space>sl :<C-u>Denite session -mode=normal<CR>
  nnoremap <Space>so :<C-u>SessionOpen<CR>
  nnoremap <Space>sc :<C-u>SessionClose<CR>
  nnoremap <Space>sd :<C-u>SessionRemove<CR>
'''

#-----------------------------------------------------------------------------
# Replace grep/quickfix results
#-----------------------------------------------------------------------------
[[plugins]]
repo        = 'thinca/vim-qfreplace'
on_ft       = ['denite', 'qf']
hook_source = '''
  autocmd MyVimrc FileType qf nnoremap <buffer> r :<C-u>Qfreplace<CR>
'''

#-----------------------------------------------------------------------------
# Cursor moves
#-----------------------------------------------------------------------------
[[plugins]]
repo     = 'rhysd/accelerated-jk'
on_map   = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo        = 'easymotion/vim-easymotion'
on_map      = '<Plug>'
hook_add    = 'call rc#plugin#easymotion#hook_add()'
hook_source = 'call rc#plugin#easymotion#hook_source()'

#-----------------------------------------------------------------------------
# Editting
#-----------------------------------------------------------------------------
# vim-sandwich
[[plugins]]
repo        = 'machakann/vim-sandwich'
on_map      = {nxo = '<Plug>'}
on_event    = ['BufRead', 'BufNewFile']
hook_source = '''
  let g:textobj#sandwich#stimeoutlen = 100
  let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
  let g:sandwich#recipes += [{'buns' : ['「', '」']}]
  let g:sandwich#recipes += [{'buns' : ['【', '】']}]
  let g:sandwich#recipes += [{'buns' : ['（', '）']}]
  let g:sandwich#recipes += [{'buns' : ['『', '』']}]
'''

# --- Expand region
[[plugins]]
repo     = 'terryma/vim-expand-region'
on_map   = {x = '<Plug>'}
hook_add = '''
  xmap v  <Plug>(expand_region_expand)
  xmap V  <Plug>(expand_region_shrink)
'''

# --- Smart commenter
[[plugins]]
repo     = 'tyru/caw.vim'
on_map   = {nx = '<Plug>'}
hook_add = '''
  nmap <silent> <Space>c  <Plug>(caw:prefix)
  xmap <silent> <Space>c  <Plug>(caw:prefix)

  let g:lmap.c.c = ['call feedkeys("\<Plug>(caw:hatpos:toggle)")', 'Toggle']
'''
# hook_add = '''
#   function! InitCaw() abort
#     if !&l:modifiable
#       silent! nunmap <buffer> gc
#       silent! xunmap <buffer> gc
#       silent! nunmap <buffer> gcc
#       silent! xunmap <buffer> gcc
#     else
#       nmap <buffer> gc <Plug>(caw:prefix)
#       xmap <buffer> gc <Plug>(caw:prefix)
#       nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
#       xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
#     endif
#   endfunction
#   autocmd MyVimrc FileType * call InitCaw()
#   call InitCaw()
# '''

# --- Smart Align
[[plugins]]
repo     = 'junegunn/vim-easy-align'
on_cmd   = ['EasyAlign', 'LiveEasyAlign']
hook_add = '''
  vnoremap <Enter> :EasyAlign<CR>
'''

# --- SKK imput method for Japanese
[[plugins]]
repo        = 'tyru/eskk.vim'
on_map      = {ic = '<Plug>'}
hook_add    = 'call rc#plugin#eskk#hook_add()'
hook_source = 'call rc#plugin#eskk#hook_source()'

#-----------------------------------------------------------------------------
# Programming
#-----------------------------------------------------------------------------
# --- Print document on echo area
[[plugins]]
repo        = 'Shougo/echodoc.vim'
on_event    = 'CompleteDone'
hook_source = 'call echodoc#enable()'

# --- Git operations
[[plugins]]
repo             = 'lambdalisue/gina.vim'
on_cmd           = 'Gina'
hook_add         = 'call rc#plugin#gina#hook_add()'
hook_post_source = 'call rc#plugin#gina#hook_post_source()'

# --- reStructuredText (rst)
[[plugins]]
repo  = 'gu-fan/riv.vim'
on_ft = 'rst'

# --- Python pyenv
[[plugins]]
repo  = 'lambdalisue/vim-pyenv'
on_ft = 'python'
# Do not load vim-pyenv until *.py is opened and make sure that it is loaded
# after jedi-vim is loaded.
# depends = 'jedi-vim'

# --- Language server protocol (LSP) client
[[plugins]]
repo        = 'autozimu/LanguageClient-neovim'
depends     = ['deoplete.nvim', 'denite.nvim']
rev         = 'next'
build       = 'bash install.sh'
on_ft       = ['c', 'cpp', 'python', 'rust']
hook_source = 'call rc#plugin#LanguageClient#hook_source()'

# --- Latex
[[plugins]]
repo    = 'lervag/vimtex'
depends = ['deoplete.nvim']
on_ft   = 'tex'
hook_source = 'call rc#plugin#vimtex#hook_source()'

# --- Markdown preview
[[plugins]]
repo = 'iamcco/mathjax-support-for-mkdp'
on_ft = 'markdown'
depends = ['markdown-preview.vim']

[[plugins]]
repo = 'iamcco/markdown-preview.vim'
on_ft = 'markdown'
hook_source = '''
  let g:mkdp_refresh_slow = 1
'''

# [[plugins]]
# repo = 'euclio/vim-markdown-composer'
# on_ft = 'markdown'
# hook_post_update = '''
#   if has('nvim')
#     !cargo build --release
#   else
#     !cargo build --release --no-default-features --features json-rpc
#   endif
# '''

