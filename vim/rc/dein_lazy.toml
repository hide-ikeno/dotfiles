# === Plugins (lazy loading) ===

#-----------------------------------------------------------------------------
# Asyncronous execution
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif executable('gmake')
    let cmd =
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

#------------------------------------------------------------------------------
# Auto completion
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = 'call rc#plugin#deoplete#hook_source()'
hook_post_source = 'call rc#plugin#deoplete#hook_post_source()'

# --- Deoplete sources
[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_if = 1

# --- Source for Vim script
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

# --- Auto close parentheses
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertCharPre'
hook_post_source = '''
  call lexima#add_rule({'char': '<C-h>', 'at': '(\%#)',   'delete': 1})
  call lexima#add_rule({'char': '<C-h>', 'at': '{\%#}',   'delete': 1})
  call lexima#add_rule({'char': '<C-h>', 'at': '\[\%#\]', 'delete': 1})
  call lexima#add_rule({'char': '<C-h>', 'at': '"\%#"',   'delete': 1})
  call lexima#add_rule({'char': '<C-h>', 'at': "'\\%#'",  'delete': 1})
  call lexima#add_rule({'char': '<C-h>', 'at': '`\%#`',   'delete': 1})

  call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
  call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
  call lexima#add_rule({'char': '<BS>',  'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
  call lexima#add_rule({'char': '<C-h>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
'''

#------------------------------------------------------------------------------
# Snippets
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  imap <silent><C-s>  <Plug>(neosnippet_expand_or_jump)
  smap <silent><C-s>  <Plug>(neosnippet_expand_or_jump)
  xmap <silent><C-s>  <Plug>(neosnippet_expand_target)

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#snippets_directory = g:vimrc_root . '/snippets'

  autocmd MyVimrc CompleteDone * call neosnippet#complete_done()
'''

#------------------------------------------------------------------------------
# Denite
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'vim-qfreplace'
on_cmd = 'Denite'
hook_add = 'call rc#plugin#denite#hook_add()'
hook_source = 'call rc#plugin#denite#hook_source()'

# --- Denite sources
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = 'denite.nvim'

[[plugins]]
repo = 'chemzqm/unite-location'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'rafi/vim-denite-session'
on_source = 'denite.nvim'

#-----------------------------------------------------------------------------
# Windows, Panes, Tabs
#-----------------------------------------------------------------------------
# Navigate windows like tmux's 'display-pane'
[[plugins]]
repo = 't9md/vim-choosewin'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap -           <Plug>(choosewin)
  nmap <Leader>-  :<C-u>ChooseWinSwapStay<CR>
'''

#-----------------------------------------------------------------------------
# Extended commands
#-----------------------------------------------------------------------------
[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = {n = '<Plug>'}
hook_add = 'call rc#plugin#easymotion#hook_add()'
hook_source = 'call rc#plugin#easymotion#hook_source()'


[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_map = {nv = '<Plug>'}
hook_add = '''
  map  gj  <Plug>(edgemotion-j)
  map  gk  <Plug>(edgemotion-k)
  xmap gj  <Plug>(edgemotion-j)
  xmap gk  <Plug>(edgemotion-k)
'''

#----------------------------------------------------------------------------et-
# Interfaces
#-----------------------------------------------------------------------------
# --- Calendar
[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = 'Calendar'
hook_source = '''
  let g:calendar_google_calendar = 1
  let g:calendar_google_task = 1
'''

# --- Quickly highlight <cword> or visually selected word
[[plugins]]
repo   = 't9md/vim-quickhl'
on_map = {nv = '<Plug>'}
hook_add = '''
  " TODO: key mapping conflict
  nmap <Leader>, <Plug>(quickhl-manual-this)
  xmap <Leader>, <Plug>(quickhl-manual-this)
'''

# ---  Show a git diff in the gutter and stages/undoes hunks
[[plugins]]
repo = 'airblade/vim-gitgutter'
if = 'has("signs")'
on_path = '.*'
hook_add = '''
  nmap <silent> <Leader>gk  <Plug>GitGutterPrevHunkzz
  nmap <silent> <Leader>gj  <Plug>GitGutterNextHunkzz
  nmap <silent> <Leader>gp  <Plug>GitGutterNextHunkzz
'''

# --- Visually displaying indent levels in code
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_cmd = ['IndentGuidesEnable', 'IndentGuidesDisable', 'IndentGuidesToggle']
hook_add = '''
  nmap <silent><Leader>ti :<C-u>IndentGuidesToggle<CR>
'''
hook_source = '''
  let g:indent_guides_enable_on_vim_startup = 0
  let g:indent_guides_default_mapping = 0
  let g:indent_guides_indent_levels = 15
  let g:indent_guides_start_level = 2
  let g:indent_guides_exclude_filetypes = ['help', 'denite', 'nerdtree']
  let g:indend_guides_color_change_percent = 20
'''

# --- Perform the replacement in |quickfix|
[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['denite', 'qf']
hook_source = '''
  autocmd MyVimrc FileType qf nnoremap <buffer> r :<C-u>Qfreplace<CR>
'''

#------------------------------------------------------------------------------
# Filer
#------------------------------------------------------------------------------
[[plugins]]
repo = 'cocopon/vaffle.vim'
on_cmd = ['Vaffle']
hook_add = '''
  " Changes the working directory to the selected one automatically
  let g:vaffle_auto_cd = 1

  function! s:customize_vaffle_mappings() abort
    " Customize key mappings here
    nmap <buffer> <Bslash> <Plug>(vaffle-open-root)
    nmap <buffer> l        <Plug>(vaffle-open-selected)
  endfunction

  nnoremap <silent> <Space>fe :<C-u>Vaffle<CR>
  autocmd MyVimrc FileType vaffle call s:customize_vaffle_mappings()
'''

#------------------------------------------------------------------------------
# Textobj extensions
#------------------------------------------------------------------------------
[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
  omap <silent> ab  <Plug>(textobj-multiblock-a)
  omap <silent> ib  <Plug>(textobj-multiblock-i)
  xmap <silent> ab  <Plug>(textobj-multiblock-a)
  xmap <silent> ib  <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'machakann/vim-textobj-delimited'

# --- Expand region
[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap v  <Plug>(expand_region_expand)
  xmap V  <Plug>(expand_region_shrink)
'''

#------------------------------------------------------------------------------
# Operator extensions
#------------------------------------------------------------------------------
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = {vnx = '<Plug>'}
hook_add = '''
  xmap p  <Plug>(operator-replace)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['vim-operator-user', 'vim-textobj-multiblock']
on_map = {vnx = '<Plug>'}
hook_add = '''
  " operator mappings
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)

  " delete or replace most inner surround
  nmap <silent>saa <Plug>(operator-surround-append)<Plug>(textobj-multiblock-a)
  nmap <silent>sai <Plug>(operator-surround-append)<Plug>(textobj-multiblock-i)
  nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
  nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
'''

[[plugins]]
repo = 'haya14busa/vim-operator-flashy'
depends = 'vim-operator-user'
on_map = {nx = '<Plug>'}
hook_add = '''
  map  y  <Plug>(operator-flashy)
  nmap Y  <Plug>(operator-flashy)$
'''


#-----------------------------------------------------------------------------
# Editting
#-----------------------------------------------------------------------------
# --- Smart commenter
[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> gc
      silent! xunmap <buffer> gc
      silent! nunmap <buffer> gcc
      silent! xunmap <buffer> gcc
    else
      nmap <buffer> gc <Plug>(caw:prefix)
      xmap <buffer> gc <Plug>(caw:prefix)
      nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyVimrc FileType * call InitCaw()
  call InitCaw()
'''

# --- Smart Align
[[plugins]]
repo = 'junegunn/vim-easy-align'
on_cmd = ['EasyAlign', 'LiveEasyAlign']
hook_add = '''
  vnoremap <Enter> :EasyAlign<CR>
'''

# --- Extended J command
[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {nx = '<Plug>'}
hook_add = '''
  nmap J  <Plug>(jplus)
  vmap J  <Plug>(jplus)

  " Insert one or more characters when join
  nmap <Leader>J  <Plug>(jplus-input)
  vmap <Leader>J  <Plug>(jplus-input)
'''

# --- Substitute with preview
# [[plugins]]
# repo = 'osyo-manga/vim-over'

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}

# --- SKK imput method for Japanese
[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>'}
hook_add = 'call rc#plugin#eskk#hook_add()'
hook_source = 'call rc#plugin#eskk#hook_source()'

#-----------------------------------------------------------------------------
# Programming
#-----------------------------------------------------------------------------
# --- Print document on echo area
[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = 'call echodoc#enable()'

# --- Git operations
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = 'call rc#plugin#gina#hook_add()'
hook_post_source = 'call rc#plugin#gina#hook_post_source()'

# --- Asynchronous Lint Engine (ALE)
[[plugins]]
repo = 'w0rp/ale'
on_path = '.*'
hook_source = '''
  let g:ale_fix_on_save = 1
'''

# --- Language server protocol (LSP) client
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
depends = ['deoplete.nvim', 'denite.nvim']
rev = 'next'
build = 'bash install.sh'
on_ft = ['c', 'cpp', 'python', 'rust']
hook_source = 'call rc#plugin#LanguageClient#hook_source()'

# --- Latex
[[plugins]]
repo = 'lervag/vimtex'
depends = ['deoplete.nvim']
on_ft = 'tex'
hook_source = 'call rc#plugin#vimtex#hook_source()'

# --- Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
  let g:rustfmt_autosave = 1
'''

# --- Python
[[plugins]]
repo = 'lambdalisue/vim-pyenv'
on_ft = 'python'
# Do not load vim-pyenv until *.py is opened and make sure that it is loaded
# after jedi-vim is loaded.
# depends = 'jedi-vim'

[[plugins]]
repo = 'tmhedberg/SimpylFold'
on_ft = 'python'

[[plugins]]
repo = 'raimon49/requirements.txt.vim'
on_ft = 'requirements'

# --- HTML/CSS/Javascript
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'jsx', 'javascript', 'javascript.jsx']

# --- CSV
[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = 'csv'

# --- Markdown
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_math = 1
  let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

# Generate table of contents for Markdown file
[[plugins]]
repo = 'mzlogin/vim-markdown-toc'
on_cmd = ['GenTocGFM', 'GenTocRedcarpet', 'GenTocGitLab', 'UpdateToc']
hook_source = '''
  let g:vmt_auto_update_on_save = 0
'''

# Markdown live preview
[[plugins]]
repo = 'iamcco/mathjax-support-for-mkdp'
on_ft = 'markdown'
depends = ['markdown-preview.vim']

[[plugins]]
repo = 'iamcco/markdown-preview.vim'
on_ft = 'markdown'
hook_source = '''
  let g:mkdp_refresh_slow = 1
'''

# --- reStructuredText (rst)
[[plugins]]
repo = 'gu-fan/riv.vim'
on_ft = 'rst'

# --- Emmet
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'jsx', 'javascript', 'javascript.jsx']

# --- Hex editor
[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = 1
'''
