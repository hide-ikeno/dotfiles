#-----------------------------------------------------------------------------
# Asyncronous execution
#------------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif executable('gmake')
    let cmd =
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

#------------------------------------------------------------------------------
# Auto completion
#------------------------------------------------------------------------------
[[plugins]]
repo             = 'Shougo/deoplete.nvim'
depends          = 'context_filetype.vim'
on_event         = 'InsertEnter'
hook_source      = 'call rc#plugin#deoplete#hook_source()'
hook_post_source = 'call rc#plugin#deoplete#hook_post_source()'

#------------------------------------------------------------------------------
# Snippets
#------------------------------------------------------------------------------
[[plugins]]
repo        = 'Shougo/neosnippet'
depends     = ['neosnippet-snippets', 'context_filetype.vim']
on_event    = 'InsertCharPre'
on_ft       = 'snippet'
hook_add    = 'call rc#plugin#neosnippet#hook_add()'
hook_source = 'call rc#plugin#neosnippet#hook_source()'

#------------------------------------------------------------------------------
# Detect filetype in the context of current cursor position
#------------------------------------------------------------------------------
# [[plugins]]
# repo = 'osyo-manga/vim-precious'
# depends = ['context_filetype.vim']
# on_event = ['BufNewFile', 'BufRead']

#------------------------------------------------------------------------------
# Denite
#------------------------------------------------------------------------------
[[plugins]]
repo        = 'Shougo/echodoc.vim'
on_event    = 'CompleteDone'
hook_source = 'call echodoc#enable()'

[[plugins]]
repo        = 'Shougo/denite.nvim'
on_cmd      = 'Denite'
hook_add    = 'call rc#plugin#denite#hook_add()'
hook_source = 'call rc#plugin#denite#hook_source()'

# --- Denite sources
[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

[[plugins]]
repo      = 'Shougo/neoyank.vim'
on_if     = 1
on_event  = 'TextYankPost'
on_source = 'denite.nvim'

[[plugins]]
repo      = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo      = 'chemzqm/denite-extra'
on_source = 'denite.nvim'

#-----------------------------------------------------------------------------
# Programming
#-----------------------------------------------------------------------------
[[plugins]]
repo  = 'lambdalisue/vim-pyenv'
on_ft = ['python']
# Do not load vim-pyenv until *.py is opened and make sure that it is loaded
# after jedi-vim is loaded.
# depends = 'jedi-vim'

[[plugins]]
repo             = 'lambdalisue/gina.vim'
on_cmd           = 'Gina'
hook_add         = 'call rc#plugin#gina#hook_add()'
hook_post_source = 'call rc#plugin#gina#hook_post_source()'

#------------------------------------------------------------------------------
# EasyMotion
#------------------------------------------------------------------------------
[[plugins]]
repo        = 'easymotion/vim-easymotion'
on_map      = '<Plug>'
on_func     = ['EasyMotion#go']
hook_add    = 'call rc#plugin#easymotion#hook_add()'
hook_source = 'call rc#plugin#easymotion#hook_source()'

#-----------------------------------------------------------------------------
# Smart commenter
#-----------------------------------------------------------------------------
[[plugins]]
repo        = 'tyru/caw.vim'
on_map      = '<Plug>'
hook_add    = 'call rc#plugin#caw#hook_add()'
hook_source = 'call rc#plugin#caw#hook_source()'

#-----------------------------------------------------------------------------
# Smart Align
#-----------------------------------------------------------------------------
[[plugins]]
repo     = 'junegunn/vim-easy-align'
on_map   = {nx = '<Plug>'}
hook_add = 'call rc#plugin#easyalign#hook_add()'

#-----------------------------------------------------------------------------
# SKK
#-----------------------------------------------------------------------------
[[plugins]]
repo        = 'tyru/eskk.vim'
on_map      = {ic = '<Plug>'}
hook_add    = 'call rc#plugin#eskk#hook_add()'
hook_source = 'call rc#plugin#eskk#hook_source()'

#------------------------------------------------------------------------------
# Programming
#------------------------------------------------------------------------------
# Language server protocol (LSP) client
[[plugins]]
repo        = 'autozimu/LanguageClient-neovim'
depends     = ['deoplete.nvim', 'denite.nvim']
rev         = 'next'
build       = 'bash install.sh'
on_ft       = ['c', 'cpp', 'python', 'rust']
hook_source = 'call rc#plugin#LanguageClient#hook_source()'
#hook_add    = 'call rc#plugin#LanguageClient#hook_add()'
#hook_post_source = 'call rc#plugin#LanguageClient#hook_post_source()'

#------------------------------------------------------------------------------
# Leader guide
#------------------------------------------------------------------------------
# repo = 'hecal3/vim-leader-guide'
# on_event = ['VimEnter']
# hook_post_source = '''
#   let g:topdict = {}
#   let g:topdict[' '] = g:lmap
#   let g:topdict[' ']['name'] = '<leader>'
#   let g:topdict[','] = g:llmap
#   let g:topdict[',']['name'] = '<localleader>'
#
#   " register it with the guide:
#   call leaderGuide#register_prefix_descriptions("", "g:topdict")
#
#   " define mappings:
#   nnoremap <silent> <Leader>  :<C-u>LeaderGuide       '<Space>'<CR>
#   vnoremap <silent> <Leader>  :<C-u>LeaderGuideVisual '<Space>'<CR>
#   map               <Leader>.  <Plug>leaderguide-global
#   nnoremap <LocalLeader>      :<C-u>LeaderGuide        ','<CR>
#   vnoremap <LocalLeader>      :<C-u>LeaderGuideVisual  ','<CR>
#   map      <LocalLeader>.      <Plug>leaderguide-buffer<Paste>
# '''

